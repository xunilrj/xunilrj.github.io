# Check point inside polygon

In a lot of situations we need to know if a point is inside a polygon. Specially in GUI and games. Old school games such as Monkey Island use a lot of tricks to appear that the scenario is 3D, has depth, when all that it has is a 2D image. One of the tricks is to limit the character to walk within a polygon. So you need to know when you are inside or outside the polygon.

The result is simple, but the path to the algorithm is not necessarily obvious to every developer.

Let see if we can go step-by-step.

#include canvas.result.js

## Left or Right of line

Our first step is to decide with a point is "left" or "right" of a line defined by two point. If you remember your Linear Algebra classes, this will be easy.

First, remember what a dot-product gives you. Play around with the vector and see what happens when the vector move from "left" to "right" of the line.

#include canvas.dotproduct.js

That's right! The sign of the dot-product change. The dot-product is easily calculated.

#include dotproduct.latex
#include code.dotproduct.js

But this method only works with two vector and we have three points. If you remember your Linear Algebra class, you will remember that we can generate these two vectors from our points.

#include points2vectors.latex
#include code.points2vectors.js

Ok. Now we can assemble everything together and have out final method.

#include pointsideline.latex
#include code.pointsideline.js

But we can simplify this. Because this methods works for any two lines, it is more generic than needed. We do not have four points, we actually have three points. Our "second" line is something like:

#include secondline.latex
#include canvas.secondline.latex



