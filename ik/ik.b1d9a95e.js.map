{"version":3,"sources":["once.js","mouseCanvas.js","node_modules/is-any-array/src/index.js","node_modules/ml-array-max/lib-es6/index.js","node_modules/ml-array-min/lib-es6/index.js","node_modules/ml-array-rescale/lib-es6/index.js","node_modules/ml-matrix/src/util.js","node_modules/ml-matrix/src/stat.js","node_modules/ml-matrix/src/inspect.js","node_modules/ml-matrix/src/mathOperations.js","node_modules/ml-matrix/src/matrix.js","node_modules/ml-matrix/src/views/base.js","node_modules/ml-matrix/src/views/column.js","node_modules/ml-matrix/src/views/columnSelection.js","node_modules/ml-matrix/src/views/flipColumn.js","node_modules/ml-matrix/src/views/flipRow.js","node_modules/ml-matrix/src/views/row.js","node_modules/ml-matrix/src/views/rowSelection.js","node_modules/ml-matrix/src/views/selection.js","node_modules/ml-matrix/src/views/sub.js","node_modules/ml-matrix/src/views/transpose.js","node_modules/ml-matrix/src/views/index.js","node_modules/ml-matrix/src/wrap/WrapperMatrix1D.js","node_modules/ml-matrix/src/wrap/WrapperMatrix2D.js","node_modules/ml-matrix/src/wrap/wrap.js","node_modules/ml-matrix/src/dc/lu.js","node_modules/ml-matrix/src/dc/util.js","node_modules/ml-matrix/src/dc/qr.js","node_modules/ml-matrix/src/dc/svd.js","node_modules/ml-matrix/src/decompositions.js","node_modules/ml-matrix/src/determinant.js","node_modules/ml-matrix/src/linearDependencies.js","node_modules/ml-matrix/src/pseudoInverse.js","node_modules/ml-matrix/src/covariance.js","node_modules/ml-matrix/src/correlation.js","node_modules/ml-matrix/src/dc/evd.js","node_modules/ml-matrix/src/dc/cholesky.js","node_modules/ml-matrix/src/dc/nipals.js","node_modules/ml-matrix/src/index.js","ik.js"],"names":["onceSet","Set","console","once","key","obj","has","add","log","mouseCanvas","canvas","rects","lastMouseXY","lastRect","lastState","states","toCanvas","x","y","standardMouseDown","e","callback","p","type","standardMouseUp","standardMouseMove","i","length","r","updateCoords","helper","rectAround","pos","tl","br","coords","enter","inside","exit","rect","updateCanvas","cursor","style","state","data","addEventListener","mouseDown","mouseUp","ee","cRect","getBoundingClientRect","clientX","left","clientY","top","mouseMove","toWorld","f","addRect","push","max","input","TypeError","maxValue","min","minValue","rescale","options","output","arguments","undefined","Array","currentMin","currentMax","RangeError","_options$min","autoMinMax","_options$max","factor","checkRowIndex","matrix","index","outer","rows","checkColumnIndex","columns","checkRowVector","vector","to1DArray","checkColumnVector","checkIndices","rowIndices","columnIndices","row","checkRowIndices","column","checkColumnIndices","rowOut","some","isArray","from","columnOut","c","checkRange","startRow","endRow","startColumn","endColumn","checkNumber","newArray","value","array","name","sumByRow","sum","j","get","sumByColumn","sumAll","v","productByRow","productByColumn","productAll","varianceByRow","unbiased","mean","cols","variance","sum1","sum2","varianceByColumn","varianceAll","size","centerByRow","set","centerByColumn","centerAll","getScaleByRow","scale","Math","pow","sqrt","scaleByRow","getScaleByColumn","scaleByColumn","getScaleAll","divider","scaleAll","inspectMatrix","indent","repeat","indentData","constructor","inspectData","maxRows","maxColumns","maxNumSize","maxI","maxJ","result","line","formatNumber","join","num","numStr","String","padEnd","precise","toPrecision","exponential","toExponential","eIndex","indexOf","substring","installMathOperations","AbstractMatrix","Matrix","prototype","addS","addM","checkMatrix","newMatrix","sub","subS","subM","subtract","subtractS","subtractM","mul","mulS","mulM","multiply","multiplyS","multiplyM","div","divS","divM","divide","divideS","divideM","mod","modS","modM","modulus","modulusS","modulusM","and","andS","andM","or","orS","orM","xor","xorS","xorM","leftShift","leftShiftS","leftShiftM","signPropagatingRightShift","signPropagatingRightShiftS","signPropagatingRightShiftM","rightShift","rightShiftS","rightShiftM","zeroFillRightShift","zeroFillRightShiftS","zeroFillRightShiftM","not","abs","acos","acosh","asin","asinh","atan","atanh","cbrt","ceil","clz32","cos","cosh","exp","expm1","floor","fround","log1p","log10","log2","round","sign","sin","sinh","tan","tanh","trunc","arg0","powS","powM","from1DArray","newRows","newColumns","newData","rowVector","columnVector","zeros","ones","fill","rand","random","randInt","Number","isInteger","interval","eye","diag","l","matrix1","matrix2","isMatrix","klass","apply","call","to2DArray","copy","toJSON","isRowVector","isColumnVector","isVector","isSquare","isSymmetric","isEchelonForm","previousColumn","checked","isReducedEchelonForm","k","echelonForm","clone","h","iMax","swapRows","tmp","reducedEchelonForm","m","n","maxRow","pivot","Error","setSubMatrix","neg","getRow","getRowVector","setRow","row1","row2","temp","getColumn","getColumnVector","setColumn","swapColumns","column1","column2","addRowVector","subRowVector","mulRowVector","divRowVector","addColumnVector","subColumnVector","mulColumnVector","divColumnVector","mulRow","mulColumn","maxIndex","idx","minIndex","maxRowIndex","minRow","minRowIndex","maxColumn","maxColumnIndex","minColumn","minColumnIndex","norm","cumulativeSum","dot","vector2","vector1","mmul","other","Bcolj","Float64Array","s","strassen2x2","a11","b11","a12","b12","a21","b21","a22","b22","m1","m2","m3","m4","m5","c00","c01","c10","c11","strassen3x3","a00","a01","a02","a10","a20","b00","b01","b02","b10","b20","m6","m7","m8","m9","m12","m13","m14","m15","m16","m17","m18","c02","c12","c20","c21","c22","mmulStrassen","r1","c1","r2","c2","embed","mat","resultat","warn","blockMult","a","b","halfRows","parseInt","halfCols","subMatrix","scaleRows","isFinite","scaleColumns","flipRows","middle","first","last","flipColumns","kroneckerProduct","q","transpose","sortRows","compareFunction","compareNumbers","sort","sortColumns","subMatrixRow","indices","subMatrixColumn","selection","rowIndex","columnIndex","trace","by","product","standardDeviation","center","Symbol","for","randomInt","diagonal","identity","negate","tensorProduct","nRows","nColumns","arrayData","removeRow","splice","addRow","removeColumn","newRow","addColumn","BaseView","MatrixColumnView","MatrixColumnSelectionView","MatrixFlipColumnView","MatrixFlipRowView","MatrixRowView","MatrixRowSelectionView","MatrixSelectionView","MatrixSubView","MatrixTransposeView","WrapperMatrix1D","_calculateIndex","WrapperMatrix2D","wrap","LuDecomposition","lu","t","LUcolj","kmax","pivotVector","pivotSign","LU","isSingular","col","solve","count","X","determinant","lowerTriangularMatrix","upperTriangularMatrix","pivotPermutationVector","hypotenuse","QrDecomposition","qr","rdiag","nrm","QR","Rdiag","isFullRank","orthogonalMatrix","SingularValueDecomposition","computeLeftSingularVectors","computeRightSingularVectors","autoTranspose","wantu","Boolean","wantv","swapped","aux","nu","ni","U","V","work","si","nct","nrt","mrc","pp","iter","eps","EPSILON","kase","alpha","MIN_VALUE","isNaN","ks","cs","sn","sp","spm1","epm1","sk","ek","shift","g","Y","threshold","scols","Ls","rightSingularVectors","VL","vrows","urows","VLU","solveForDiagonal","inverse","vcols","ucols","condition","norm2","rank","tol","ii","leftSingularVectors","diagonalMatrix","useSVD","leftHandSide","rightHandSide","d","subMatrix0","subMatrix1","subMatrix2","xrange","exception","range","dependenciesOneRow","error","thresholdValue","thresholdError","returnArray","linearDependencies","results","Abis","pseudoInverse","svdSolution","SVD","covariance","xMatrix","yMatrix","yIsSame","cov","correlation","sdx","sdy","corr","EigenvalueDecomposition","assumeSymmetric","tred2","tql2","H","ort","orthes","hqr2","realEigenvalues","imaginaryEigenvalues","eigenvectorMatrix","hh","dl1","c3","el1","s2","tst1","low","high","nn","w","ra","sa","vr","vi","notlast","cdivres","exshift","z","cdiv","xr","xi","yr","yi","CholeskyDecomposition","dimension","positiveDefinite","L","isPositiveDefinite","B","nipals","scaleScores","maxIterations","terminationCriteria","u","diff","tOld","counter","xResidual","residual","yResidual","betas","crossProduct","out","ax","ay","az","bx","bz","document","querySelector","rotates","pushRotate","angle","popRotate","pop","getRotate","useRotation","target","realTarget","fromCanvas","ctx","getContext","width","height","drawCircle","beginPath","arc","PI","stroke","drawCross","fx","fy","tx","ty","moveTo","lineTo","drawAngle","startAngle","fillStyle","strokeStyle","closePath","oldLineWidth","lineWidth","drawBone","world","ew","effector_world","cx","cy","ex","ey","drawBones","bones","eff","filter","isEffector","forEach","xl","yl","setLineDash","oldStrokeStyle","drawDashedLine","x1","y1","x2","y2","drawPathTarget","drawTarget","color","skeleton","children","jpath","updateJ","recordPath","ox","oy","rayx","rayy","steps","deffx","deffy","distance","cp","jPlus","dtheta","bonespos","updateBones","ikEnabled","updateBone","bone","xx","render","clearRect","ux","uy","toAngleSpace","t1","fillText","requestAnimationFrame","getElementById","createElement","label","parseFloat","innerText","root","append"],"mappings":"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","file":"ik.b1d9a95e.js","sourceRoot":"src","sourcesContent":["const onceSet = new Set();\r\nconsole.once = function(key, obj)\r\n{\r\n    if(onceSet.has(key)) return;\r\n    onceSet.add(key);\r\n    console.log(obj);\r\n}","\r\nexport default function mouseCanvas(canvas)\r\n{\r\n    let rects = [];\r\n    let lastMouseXY = [];\r\n    let lastRect = null;\r\n\r\n    let lastData = null;\r\n    let lastState = null;\r\n    let states = {\r\n\r\n    };\r\n\r\n    let toCanvas = (x,y) => [x,y];\r\n    let toWorld = (x,y) => [x,y];\r\n\r\n    let standardMouseDown = function(e) \r\n    {\r\n        if(lastRect && lastRect.callback) {\r\n            var p = { \r\n                x: lastMouseXY[0], \r\n                y: lastMouseXY[1],\r\n                type: \"mouseDown\"\r\n            };\r\n            return [lastRect.callback(p), p];\r\n        }\r\n        return [null, null];\r\n    };\r\n    let standardMouseUp = function(e) \r\n    {\r\n        if(lastRect && lastRect.callback) {\r\n            var p = { \r\n                x: lastMouseXY[0], \r\n                y: lastMouseXY[1],\r\n                type: \"mouseUp\"\r\n            };\r\n            return [lastRect.callback(p), p];\r\n        }\r\n        return [null, null];\r\n    };\r\n    let standardMouseMove = function(e) \r\n    { \r\n        lastRect = null;\r\n        for(var i = 0; i < rects.length; ++i)\r\n        {\r\n            let r = rects[i];\r\n            if(r.updateCoords) {\r\n                var helper = {\r\n                    rectAround: function(pos) {\r\n                        let r = 5;\r\n                        let tl = toCanvas(pos[0] - r, pos[1] - r);\r\n                        let br = toCanvas(pos[0] + r, pos[1] + r);\r\n                        return [\r\n                            tl[0], br[0],\r\n                            tl[1], br[1]\r\n                        ];\r\n                    }\r\n                };\r\n                r.coords = r.updateCoords(helper);\r\n            } \r\n            //console.once(2, x)\r\n            var coords = r.coords;\r\n            if(e.x >= coords[0] && e.x <= coords[1])\r\n            {\r\n                if(e.y >= coords[2] && e.y <= coords[3])\r\n                {\r\n                    r.enter = r.inside == false;   \r\n                    r.exit = false;             \r\n                    r.inside = true;\r\n                    lastRect = r;\r\n                    var p = { \r\n                        x: e.x, \r\n                        y: e.y, \r\n                        rect: r,\r\n                        type: r.enter ? \"enter\" : \"inside\"\r\n                    };\r\n\r\n                    if(r.callback) r.callback(p);                    \r\n                    if(states[lastState].callback) states[lastState].callback(p);\r\n\r\n                    updateCanvas(p);\r\n                    return;\r\n                }\r\n            }\r\n\r\n            r.exit = r.inside == true;\r\n            r.enter = r.inside = false;        \r\n            if(r.exit) {\r\n                var p = { x: e.x, y: e.y, rect: r, type: \"exit\" };\r\n                \r\n                if(r.callback) r.callback(p);                    \r\n                if(states[lastState].callback) states[lastState].callback(p);\r\n\r\n                updateCanvas(p);\r\n                \r\n                return;\r\n            }\r\n        }\r\n    };\r\n\r\n    function updateCanvas(p)\r\n    {\r\n        if(p && p.cursor) canvas.style.cursor = p.cursor;\r\n        if(p && p.state) lastState = p.state;\r\n        if(p && p.data) lastData = p.data;\r\n        if(p && p.lastRect) lastRect = p.lastRect;\r\n    }\r\n\r\n    canvas.addEventListener(\"mousedown\", function() {\r\n        const e = {x: lastMouseXY[0], y: lastMouseXY[1], rect: lastRect};\r\n\r\n        states[lastState].mouseDown(e);\r\n        updateCanvas(e);\r\n    });\r\n    canvas.addEventListener(\"mouseup\", function() {        \r\n        const e = {x: lastMouseXY[0], y: lastMouseXY[1], rect: lastRect};\r\n\r\n        states[lastState].mouseUp(e);\r\n        updateCanvas(e);\r\n    });\r\n    canvas.addEventListener(\"mousemove\", function(ee) {\r\n        let cRect = canvas.getBoundingClientRect();\r\n        let x = ee.clientX - cRect.left;\r\n        let y = ee.clientY - cRect.top;\r\n        \r\n        lastMouseXY = [x, y];\r\n        const e = {x: lastMouseXY[0], y: lastMouseXY[1], rect: lastRect};\r\n\r\n        states[lastState].mouseMove(e);  \r\n        updateCanvas(e);\r\n    });\r\n\r\n    var obj = {\r\n        toWorld: function (f){\r\n            toWorld = f;\r\n            return obj;\r\n        },\r\n        toCanvas: function(f)\r\n        {\r\n            toCanvas = f;\r\n            return obj;\r\n        },\r\n        addRect: function(updateCoords, callback)\r\n        {            \r\n            rects.push({updateCoords, callback});\r\n            return obj;\r\n        },\r\n        state: function(state, {mouseMove, mouseDown, mouseUp, callback})\r\n        {\r\n            if(!lastState) lastState = state;\r\n            states[state] = {\r\n                callback: callback,\r\n                mouseMove: mouseMove || standardMouseMove,\r\n                mouseDown: mouseDown || standardMouseDown,\r\n                mouseUp: mouseUp || standardMouseUp\r\n            };\r\n            return obj;\r\n        }\r\n    };\r\n    return obj;\r\n}","'use strict';\n\nconst toString = Object.prototype.toString;\n\nfunction isAnyArray(object) {\n  return toString.call(object).endsWith('Array]');\n}\n\nmodule.exports = isAnyArray;\n","import isArray from 'is-any-array';\n\n/**\n * Computes the maximum of the given values\n * @param {Array<number>} input\n * @return {number}\n */\n\nfunction max(input) {\n  if (!isArray(input)) {\n    throw new TypeError('input must be an array');\n  }\n\n  if (input.length === 0) {\n    throw new TypeError('input must not be empty');\n  }\n\n  var maxValue = input[0];\n\n  for (var i = 1; i < input.length; i++) {\n    if (input[i] > maxValue) maxValue = input[i];\n  }\n\n  return maxValue;\n}\n\nexport default max;\n","import isArray from 'is-any-array';\n\n/**\n * Computes the minimum of the given values\n * @param {Array<number>} input\n * @return {number}\n */\n\nfunction min(input) {\n  if (!isArray(input)) {\n    throw new TypeError('input must be an array');\n  }\n\n  if (input.length === 0) {\n    throw new TypeError('input must not be empty');\n  }\n\n  var minValue = input[0];\n\n  for (var i = 1; i < input.length; i++) {\n    if (input[i] < minValue) minValue = input[i];\n  }\n\n  return minValue;\n}\n\nexport default min;\n","import max from 'ml-array-max';\nimport min from 'ml-array-min';\nimport isArray from 'is-any-array';\n\nfunction rescale(input) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  if (!isArray(input)) {\n    throw new TypeError('input must be an array');\n  } else if (input.length === 0) {\n    throw new TypeError('input must not be empty');\n  }\n\n  var output;\n\n  if (options.output !== undefined) {\n    if (!isArray(options.output)) {\n      throw new TypeError('output option must be an array if specified');\n    }\n\n    output = options.output;\n  } else {\n    output = new Array(input.length);\n  }\n\n  var currentMin = min(input);\n  var currentMax = max(input);\n\n  if (currentMin === currentMax) {\n    throw new RangeError('minimum and maximum input values are equal. Cannot rescale a constant array');\n  }\n\n  var _options$min = options.min,\n      minValue = _options$min === void 0 ? options.autoMinMax ? currentMin : 0 : _options$min,\n      _options$max = options.max,\n      maxValue = _options$max === void 0 ? options.autoMinMax ? currentMax : 1 : _options$max;\n\n  if (minValue >= maxValue) {\n    throw new RangeError('min option must be smaller than max option');\n  }\n\n  var factor = (maxValue - minValue) / (currentMax - currentMin);\n\n  for (var i = 0; i < input.length; i++) {\n    output[i] = (input[i] - currentMin) * factor + minValue;\n  }\n\n  return output;\n}\n\nexport default rescale;\n","/**\n * @private\n * Check that a row index is not out of bounds\n * @param {Matrix} matrix\n * @param {number} index\n * @param {boolean} [outer]\n */\nexport function checkRowIndex(matrix, index, outer) {\n  let max = outer ? matrix.rows : matrix.rows - 1;\n  if (index < 0 || index > max) {\n    throw new RangeError('Row index out of range');\n  }\n}\n\n/**\n * @private\n * Check that a column index is not out of bounds\n * @param {Matrix} matrix\n * @param {number} index\n * @param {boolean} [outer]\n */\nexport function checkColumnIndex(matrix, index, outer) {\n  let max = outer ? matrix.columns : matrix.columns - 1;\n  if (index < 0 || index > max) {\n    throw new RangeError('Column index out of range');\n  }\n}\n\n/**\n * @private\n * Check that the provided vector is an array with the right length\n * @param {Matrix} matrix\n * @param {Array|Matrix} vector\n * @return {Array}\n * @throws {RangeError}\n */\nexport function checkRowVector(matrix, vector) {\n  if (vector.to1DArray) {\n    vector = vector.to1DArray();\n  }\n  if (vector.length !== matrix.columns) {\n    throw new RangeError(\n      'vector size must be the same as the number of columns',\n    );\n  }\n  return vector;\n}\n\n/**\n * @private\n * Check that the provided vector is an array with the right length\n * @param {Matrix} matrix\n * @param {Array|Matrix} vector\n * @return {Array}\n * @throws {RangeError}\n */\nexport function checkColumnVector(matrix, vector) {\n  if (vector.to1DArray) {\n    vector = vector.to1DArray();\n  }\n  if (vector.length !== matrix.rows) {\n    throw new RangeError('vector size must be the same as the number of rows');\n  }\n  return vector;\n}\n\nexport function checkIndices(matrix, rowIndices, columnIndices) {\n  return {\n    row: checkRowIndices(matrix, rowIndices),\n    column: checkColumnIndices(matrix, columnIndices),\n  };\n}\n\nexport function checkRowIndices(matrix, rowIndices) {\n  if (typeof rowIndices !== 'object') {\n    throw new TypeError('unexpected type for row indices');\n  }\n\n  let rowOut = rowIndices.some((r) => {\n    return r < 0 || r >= matrix.rows;\n  });\n\n  if (rowOut) {\n    throw new RangeError('row indices are out of range');\n  }\n\n  if (!Array.isArray(rowIndices)) rowIndices = Array.from(rowIndices);\n\n  return rowIndices;\n}\n\nexport function checkColumnIndices(matrix, columnIndices) {\n  if (typeof columnIndices !== 'object') {\n    throw new TypeError('unexpected type for column indices');\n  }\n\n  let columnOut = columnIndices.some((c) => {\n    return c < 0 || c >= matrix.columns;\n  });\n\n  if (columnOut) {\n    throw new RangeError('column indices are out of range');\n  }\n  if (!Array.isArray(columnIndices)) columnIndices = Array.from(columnIndices);\n\n  return columnIndices;\n}\n\nexport function checkRange(matrix, startRow, endRow, startColumn, endColumn) {\n  if (arguments.length !== 5) {\n    throw new RangeError('expected 4 arguments');\n  }\n  checkNumber('startRow', startRow);\n  checkNumber('endRow', endRow);\n  checkNumber('startColumn', startColumn);\n  checkNumber('endColumn', endColumn);\n  if (\n    startRow > endRow ||\n    startColumn > endColumn ||\n    startRow < 0 ||\n    startRow >= matrix.rows ||\n    endRow < 0 ||\n    endRow >= matrix.rows ||\n    startColumn < 0 ||\n    startColumn >= matrix.columns ||\n    endColumn < 0 ||\n    endColumn >= matrix.columns\n  ) {\n    throw new RangeError('Submatrix indices are out of range');\n  }\n}\n\nexport function newArray(length, value = 0) {\n  let array = [];\n  for (let i = 0; i < length; i++) {\n    array.push(value);\n  }\n  return array;\n}\n\nfunction checkNumber(name, value) {\n  if (typeof value !== 'number') {\n    throw new TypeError(`${name} must be a number`);\n  }\n}\n","import { newArray } from './util';\n\nexport function sumByRow(matrix) {\n  let sum = newArray(matrix.rows);\n  for (let i = 0; i < matrix.rows; ++i) {\n    for (let j = 0; j < matrix.columns; ++j) {\n      sum[i] += matrix.get(i, j);\n    }\n  }\n  return sum;\n}\n\nexport function sumByColumn(matrix) {\n  let sum = newArray(matrix.columns);\n  for (let i = 0; i < matrix.rows; ++i) {\n    for (let j = 0; j < matrix.columns; ++j) {\n      sum[j] += matrix.get(i, j);\n    }\n  }\n  return sum;\n}\n\nexport function sumAll(matrix) {\n  let v = 0;\n  for (let i = 0; i < matrix.rows; i++) {\n    for (let j = 0; j < matrix.columns; j++) {\n      v += matrix.get(i, j);\n    }\n  }\n  return v;\n}\n\nexport function productByRow(matrix) {\n  let sum = newArray(matrix.rows, 1);\n  for (let i = 0; i < matrix.rows; ++i) {\n    for (let j = 0; j < matrix.columns; ++j) {\n      sum[i] *= matrix.get(i, j);\n    }\n  }\n  return sum;\n}\n\nexport function productByColumn(matrix) {\n  let sum = newArray(matrix.columns, 1);\n  for (let i = 0; i < matrix.rows; ++i) {\n    for (let j = 0; j < matrix.columns; ++j) {\n      sum[j] *= matrix.get(i, j);\n    }\n  }\n  return sum;\n}\n\nexport function productAll(matrix) {\n  let v = 1;\n  for (let i = 0; i < matrix.rows; i++) {\n    for (let j = 0; j < matrix.columns; j++) {\n      v *= matrix.get(i, j);\n    }\n  }\n  return v;\n}\n\nexport function varianceByRow(matrix, unbiased, mean) {\n  const rows = matrix.rows;\n  const cols = matrix.columns;\n  const variance = [];\n\n  for (let i = 0; i < rows; i++) {\n    let sum1 = 0;\n    let sum2 = 0;\n    let x = 0;\n    for (let j = 0; j < cols; j++) {\n      x = matrix.get(i, j) - mean[i];\n      sum1 += x;\n      sum2 += x * x;\n    }\n    if (unbiased) {\n      variance.push((sum2 - (sum1 * sum1) / cols) / (cols - 1));\n    } else {\n      variance.push((sum2 - (sum1 * sum1) / cols) / cols);\n    }\n  }\n  return variance;\n}\n\nexport function varianceByColumn(matrix, unbiased, mean) {\n  const rows = matrix.rows;\n  const cols = matrix.columns;\n  const variance = [];\n\n  for (let j = 0; j < cols; j++) {\n    let sum1 = 0;\n    let sum2 = 0;\n    let x = 0;\n    for (let i = 0; i < rows; i++) {\n      x = matrix.get(i, j) - mean[j];\n      sum1 += x;\n      sum2 += x * x;\n    }\n    if (unbiased) {\n      variance.push((sum2 - (sum1 * sum1) / rows) / (rows - 1));\n    } else {\n      variance.push((sum2 - (sum1 * sum1) / rows) / rows);\n    }\n  }\n  return variance;\n}\n\nexport function varianceAll(matrix, unbiased, mean) {\n  const rows = matrix.rows;\n  const cols = matrix.columns;\n  const size = rows * cols;\n\n  let sum1 = 0;\n  let sum2 = 0;\n  let x = 0;\n  for (let i = 0; i < rows; i++) {\n    for (let j = 0; j < cols; j++) {\n      x = matrix.get(i, j) - mean;\n      sum1 += x;\n      sum2 += x * x;\n    }\n  }\n  if (unbiased) {\n    return (sum2 - (sum1 * sum1) / size) / (size - 1);\n  } else {\n    return (sum2 - (sum1 * sum1) / size) / size;\n  }\n}\n\nexport function centerByRow(matrix, mean) {\n  for (let i = 0; i < matrix.rows; i++) {\n    for (let j = 0; j < matrix.columns; j++) {\n      matrix.set(i, j, matrix.get(i, j) - mean[i]);\n    }\n  }\n}\n\nexport function centerByColumn(matrix, mean) {\n  for (let i = 0; i < matrix.rows; i++) {\n    for (let j = 0; j < matrix.columns; j++) {\n      matrix.set(i, j, matrix.get(i, j) - mean[j]);\n    }\n  }\n}\n\nexport function centerAll(matrix, mean) {\n  for (let i = 0; i < matrix.rows; i++) {\n    for (let j = 0; j < matrix.columns; j++) {\n      matrix.set(i, j, matrix.get(i, j) - mean);\n    }\n  }\n}\n\nexport function getScaleByRow(matrix) {\n  const scale = [];\n  for (let i = 0; i < matrix.rows; i++) {\n    let sum = 0;\n    for (let j = 0; j < matrix.columns; j++) {\n      sum += Math.pow(matrix.get(i, j), 2) / (matrix.columns - 1);\n    }\n    scale.push(Math.sqrt(sum));\n  }\n  return scale;\n}\n\nexport function scaleByRow(matrix, scale) {\n  for (let i = 0; i < matrix.rows; i++) {\n    for (let j = 0; j < matrix.columns; j++) {\n      matrix.set(i, j, matrix.get(i, j) / scale[i]);\n    }\n  }\n}\n\nexport function getScaleByColumn(matrix) {\n  const scale = [];\n  for (let j = 0; j < matrix.columns; j++) {\n    let sum = 0;\n    for (let i = 0; i < matrix.rows; i++) {\n      sum += Math.pow(matrix.get(i, j), 2) / (matrix.rows - 1);\n    }\n    scale.push(Math.sqrt(sum));\n  }\n  return scale;\n}\n\nexport function scaleByColumn(matrix, scale) {\n  for (let i = 0; i < matrix.rows; i++) {\n    for (let j = 0; j < matrix.columns; j++) {\n      matrix.set(i, j, matrix.get(i, j) / scale[j]);\n    }\n  }\n}\n\nexport function getScaleAll(matrix) {\n  const divider = matrix.size - 1;\n  let sum = 0;\n  for (let j = 0; j < matrix.columns; j++) {\n    for (let i = 0; i < matrix.rows; i++) {\n      sum += Math.pow(matrix.get(i, j), 2) / divider;\n    }\n  }\n  return Math.sqrt(sum);\n}\n\nexport function scaleAll(matrix, scale) {\n  for (let i = 0; i < matrix.rows; i++) {\n    for (let j = 0; j < matrix.columns; j++) {\n      matrix.set(i, j, matrix.get(i, j) / scale);\n    }\n  }\n}\n","export function inspectMatrix() {\n  const indent = ' '.repeat(2);\n  const indentData = ' '.repeat(4);\n  return `${this.constructor.name} {\n${indent}[\n${indentData}${inspectData(this, indentData)}\n${indent}]\n${indent}rows: ${this.rows}\n${indent}columns: ${this.columns}\n}`;\n}\n\nconst maxRows = 15;\nconst maxColumns = 10;\nconst maxNumSize = 8;\n\nfunction inspectData(matrix, indent) {\n  const { rows, columns } = matrix;\n  const maxI = Math.min(rows, maxRows);\n  const maxJ = Math.min(columns, maxColumns);\n  const result = [];\n  for (let i = 0; i < maxI; i++) {\n    let line = [];\n    for (let j = 0; j < maxJ; j++) {\n      line.push(formatNumber(matrix.get(i, j)));\n    }\n    result.push(`${line.join(' ')}`);\n  }\n  if (maxJ !== columns) {\n    result[result.length - 1] += ` ... ${columns - maxColumns} more columns`;\n  }\n  if (maxI !== rows) {\n    result.push(`... ${rows - maxRows} more rows`);\n  }\n  return result.join(`\\n${indent}`);\n}\n\nfunction formatNumber(num) {\n  const numStr = String(num);\n  if (numStr.length <= maxNumSize) {\n    return numStr.padEnd(maxNumSize, ' ');\n  }\n  const precise = num.toPrecision(maxNumSize - 2);\n  if (precise.length <= maxNumSize) {\n    return precise;\n  }\n  const exponential = num.toExponential(maxNumSize - 2);\n  const eIndex = exponential.indexOf('e');\n  const e = exponential.substring(eIndex);\n  return exponential.substring(0, maxNumSize - e.length) + e;\n}\n","export function installMathOperations(AbstractMatrix, Matrix) {\n  AbstractMatrix.prototype.add = function add(value) {\n    if (typeof value === 'number') return this.addS(value);\n    return this.addM(value);\n  };\n\n  AbstractMatrix.prototype.addS = function addS(value) {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) + value);\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.prototype.addM = function addM(matrix) {\n    matrix = Matrix.checkMatrix(matrix);\n    if (this.rows !== matrix.rows ||\n      this.columns !== matrix.columns) {\n      throw new RangeError('Matrices dimensions must be equal');\n    }\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) + matrix.get(i, j));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.add = function add(matrix, value) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.add(value);\n  };\n\n  AbstractMatrix.prototype.sub = function sub(value) {\n    if (typeof value === 'number') return this.subS(value);\n    return this.subM(value);\n  };\n\n  AbstractMatrix.prototype.subS = function subS(value) {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) - value);\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.prototype.subM = function subM(matrix) {\n    matrix = Matrix.checkMatrix(matrix);\n    if (this.rows !== matrix.rows ||\n      this.columns !== matrix.columns) {\n      throw new RangeError('Matrices dimensions must be equal');\n    }\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) - matrix.get(i, j));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.sub = function sub(matrix, value) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.sub(value);\n  };\n  AbstractMatrix.prototype.subtract = AbstractMatrix.prototype.sub;\n  AbstractMatrix.prototype.subtractS = AbstractMatrix.prototype.subS;\n  AbstractMatrix.prototype.subtractM = AbstractMatrix.prototype.subM;\n  AbstractMatrix.subtract = AbstractMatrix.sub;\n\n  AbstractMatrix.prototype.mul = function mul(value) {\n    if (typeof value === 'number') return this.mulS(value);\n    return this.mulM(value);\n  };\n\n  AbstractMatrix.prototype.mulS = function mulS(value) {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) * value);\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.prototype.mulM = function mulM(matrix) {\n    matrix = Matrix.checkMatrix(matrix);\n    if (this.rows !== matrix.rows ||\n      this.columns !== matrix.columns) {\n      throw new RangeError('Matrices dimensions must be equal');\n    }\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) * matrix.get(i, j));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.mul = function mul(matrix, value) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.mul(value);\n  };\n  AbstractMatrix.prototype.multiply = AbstractMatrix.prototype.mul;\n  AbstractMatrix.prototype.multiplyS = AbstractMatrix.prototype.mulS;\n  AbstractMatrix.prototype.multiplyM = AbstractMatrix.prototype.mulM;\n  AbstractMatrix.multiply = AbstractMatrix.mul;\n\n  AbstractMatrix.prototype.div = function div(value) {\n    if (typeof value === 'number') return this.divS(value);\n    return this.divM(value);\n  };\n\n  AbstractMatrix.prototype.divS = function divS(value) {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) / value);\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.prototype.divM = function divM(matrix) {\n    matrix = Matrix.checkMatrix(matrix);\n    if (this.rows !== matrix.rows ||\n      this.columns !== matrix.columns) {\n      throw new RangeError('Matrices dimensions must be equal');\n    }\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) / matrix.get(i, j));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.div = function div(matrix, value) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.div(value);\n  };\n  AbstractMatrix.prototype.divide = AbstractMatrix.prototype.div;\n  AbstractMatrix.prototype.divideS = AbstractMatrix.prototype.divS;\n  AbstractMatrix.prototype.divideM = AbstractMatrix.prototype.divM;\n  AbstractMatrix.divide = AbstractMatrix.div;\n\n  AbstractMatrix.prototype.mod = function mod(value) {\n    if (typeof value === 'number') return this.modS(value);\n    return this.modM(value);\n  };\n\n  AbstractMatrix.prototype.modS = function modS(value) {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) % value);\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.prototype.modM = function modM(matrix) {\n    matrix = Matrix.checkMatrix(matrix);\n    if (this.rows !== matrix.rows ||\n      this.columns !== matrix.columns) {\n      throw new RangeError('Matrices dimensions must be equal');\n    }\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) % matrix.get(i, j));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.mod = function mod(matrix, value) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.mod(value);\n  };\n  AbstractMatrix.prototype.modulus = AbstractMatrix.prototype.mod;\n  AbstractMatrix.prototype.modulusS = AbstractMatrix.prototype.modS;\n  AbstractMatrix.prototype.modulusM = AbstractMatrix.prototype.modM;\n  AbstractMatrix.modulus = AbstractMatrix.mod;\n\n  AbstractMatrix.prototype.and = function and(value) {\n    if (typeof value === 'number') return this.andS(value);\n    return this.andM(value);\n  };\n\n  AbstractMatrix.prototype.andS = function andS(value) {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) & value);\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.prototype.andM = function andM(matrix) {\n    matrix = Matrix.checkMatrix(matrix);\n    if (this.rows !== matrix.rows ||\n      this.columns !== matrix.columns) {\n      throw new RangeError('Matrices dimensions must be equal');\n    }\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) & matrix.get(i, j));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.and = function and(matrix, value) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.and(value);\n  };\n\n  AbstractMatrix.prototype.or = function or(value) {\n    if (typeof value === 'number') return this.orS(value);\n    return this.orM(value);\n  };\n\n  AbstractMatrix.prototype.orS = function orS(value) {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) | value);\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.prototype.orM = function orM(matrix) {\n    matrix = Matrix.checkMatrix(matrix);\n    if (this.rows !== matrix.rows ||\n      this.columns !== matrix.columns) {\n      throw new RangeError('Matrices dimensions must be equal');\n    }\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) | matrix.get(i, j));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.or = function or(matrix, value) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.or(value);\n  };\n\n  AbstractMatrix.prototype.xor = function xor(value) {\n    if (typeof value === 'number') return this.xorS(value);\n    return this.xorM(value);\n  };\n\n  AbstractMatrix.prototype.xorS = function xorS(value) {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) ^ value);\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.prototype.xorM = function xorM(matrix) {\n    matrix = Matrix.checkMatrix(matrix);\n    if (this.rows !== matrix.rows ||\n      this.columns !== matrix.columns) {\n      throw new RangeError('Matrices dimensions must be equal');\n    }\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) ^ matrix.get(i, j));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.xor = function xor(matrix, value) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.xor(value);\n  };\n\n  AbstractMatrix.prototype.leftShift = function leftShift(value) {\n    if (typeof value === 'number') return this.leftShiftS(value);\n    return this.leftShiftM(value);\n  };\n\n  AbstractMatrix.prototype.leftShiftS = function leftShiftS(value) {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) << value);\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.prototype.leftShiftM = function leftShiftM(matrix) {\n    matrix = Matrix.checkMatrix(matrix);\n    if (this.rows !== matrix.rows ||\n      this.columns !== matrix.columns) {\n      throw new RangeError('Matrices dimensions must be equal');\n    }\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) << matrix.get(i, j));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.leftShift = function leftShift(matrix, value) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.leftShift(value);\n  };\n\n  AbstractMatrix.prototype.signPropagatingRightShift = function signPropagatingRightShift(value) {\n    if (typeof value === 'number') return this.signPropagatingRightShiftS(value);\n    return this.signPropagatingRightShiftM(value);\n  };\n\n  AbstractMatrix.prototype.signPropagatingRightShiftS = function signPropagatingRightShiftS(value) {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) >> value);\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.prototype.signPropagatingRightShiftM = function signPropagatingRightShiftM(matrix) {\n    matrix = Matrix.checkMatrix(matrix);\n    if (this.rows !== matrix.rows ||\n      this.columns !== matrix.columns) {\n      throw new RangeError('Matrices dimensions must be equal');\n    }\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) >> matrix.get(i, j));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.signPropagatingRightShift = function signPropagatingRightShift(matrix, value) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.signPropagatingRightShift(value);\n  };\n\n  AbstractMatrix.prototype.rightShift = function rightShift(value) {\n    if (typeof value === 'number') return this.rightShiftS(value);\n    return this.rightShiftM(value);\n  };\n\n  AbstractMatrix.prototype.rightShiftS = function rightShiftS(value) {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) >>> value);\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.prototype.rightShiftM = function rightShiftM(matrix) {\n    matrix = Matrix.checkMatrix(matrix);\n    if (this.rows !== matrix.rows ||\n      this.columns !== matrix.columns) {\n      throw new RangeError('Matrices dimensions must be equal');\n    }\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) >>> matrix.get(i, j));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.rightShift = function rightShift(matrix, value) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.rightShift(value);\n  };\n  AbstractMatrix.prototype.zeroFillRightShift = AbstractMatrix.prototype.rightShift;\n  AbstractMatrix.prototype.zeroFillRightShiftS = AbstractMatrix.prototype.rightShiftS;\n  AbstractMatrix.prototype.zeroFillRightShiftM = AbstractMatrix.prototype.rightShiftM;\n  AbstractMatrix.zeroFillRightShift = AbstractMatrix.rightShift;\n\n  AbstractMatrix.prototype.not = function not() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, ~(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.not = function not(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.not();\n  };\n\n  AbstractMatrix.prototype.abs = function abs() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.abs(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.abs = function abs(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.abs();\n  };\n\n  AbstractMatrix.prototype.acos = function acos() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.acos(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.acos = function acos(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.acos();\n  };\n\n  AbstractMatrix.prototype.acosh = function acosh() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.acosh(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.acosh = function acosh(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.acosh();\n  };\n\n  AbstractMatrix.prototype.asin = function asin() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.asin(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.asin = function asin(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.asin();\n  };\n\n  AbstractMatrix.prototype.asinh = function asinh() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.asinh(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.asinh = function asinh(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.asinh();\n  };\n\n  AbstractMatrix.prototype.atan = function atan() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.atan(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.atan = function atan(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.atan();\n  };\n\n  AbstractMatrix.prototype.atanh = function atanh() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.atanh(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.atanh = function atanh(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.atanh();\n  };\n\n  AbstractMatrix.prototype.cbrt = function cbrt() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.cbrt(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.cbrt = function cbrt(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.cbrt();\n  };\n\n  AbstractMatrix.prototype.ceil = function ceil() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.ceil(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.ceil = function ceil(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.ceil();\n  };\n\n  AbstractMatrix.prototype.clz32 = function clz32() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.clz32(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.clz32 = function clz32(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.clz32();\n  };\n\n  AbstractMatrix.prototype.cos = function cos() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.cos(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.cos = function cos(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.cos();\n  };\n\n  AbstractMatrix.prototype.cosh = function cosh() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.cosh(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.cosh = function cosh(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.cosh();\n  };\n\n  AbstractMatrix.prototype.exp = function exp() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.exp(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.exp = function exp(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.exp();\n  };\n\n  AbstractMatrix.prototype.expm1 = function expm1() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.expm1(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.expm1 = function expm1(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.expm1();\n  };\n\n  AbstractMatrix.prototype.floor = function floor() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.floor(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.floor = function floor(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.floor();\n  };\n\n  AbstractMatrix.prototype.fround = function fround() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.fround(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.fround = function fround(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.fround();\n  };\n\n  AbstractMatrix.prototype.log = function log() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.log(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.log = function log(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.log();\n  };\n\n  AbstractMatrix.prototype.log1p = function log1p() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.log1p(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.log1p = function log1p(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.log1p();\n  };\n\n  AbstractMatrix.prototype.log10 = function log10() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.log10(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.log10 = function log10(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.log10();\n  };\n\n  AbstractMatrix.prototype.log2 = function log2() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.log2(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.log2 = function log2(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.log2();\n  };\n\n  AbstractMatrix.prototype.round = function round() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.round(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.round = function round(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.round();\n  };\n\n  AbstractMatrix.prototype.sign = function sign() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.sign(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.sign = function sign(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.sign();\n  };\n\n  AbstractMatrix.prototype.sin = function sin() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.sin(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.sin = function sin(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.sin();\n  };\n\n  AbstractMatrix.prototype.sinh = function sinh() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.sinh(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.sinh = function sinh(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.sinh();\n  };\n\n  AbstractMatrix.prototype.sqrt = function sqrt() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.sqrt(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.sqrt = function sqrt(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.sqrt();\n  };\n\n  AbstractMatrix.prototype.tan = function tan() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.tan(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.tan = function tan(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.tan();\n  };\n\n  AbstractMatrix.prototype.tanh = function tanh() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.tanh(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.tanh = function tanh(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.tanh();\n  };\n\n  AbstractMatrix.prototype.trunc = function trunc() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.trunc(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.trunc = function trunc(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.trunc();\n  };\n\n  AbstractMatrix.pow = function pow(matrix, arg0) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.pow(arg0);\n  };\n\n  AbstractMatrix.prototype.pow = function pow(value) {\n    if (typeof value === 'number') return this.powS(value);\n    return this.powM(value);\n  };\n\n  AbstractMatrix.prototype.powS = function powS(value) {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.pow(this.get(i, j), value));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.prototype.powM = function powM(matrix) {\n    matrix = Matrix.checkMatrix(matrix);\n    if (this.rows !== matrix.rows ||\n      this.columns !== matrix.columns) {\n      throw new RangeError('Matrices dimensions must be equal');\n    }\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.pow(this.get(i, j), matrix.get(i, j)));\n      }\n    }\n    return this;\n  };\n}\n","import rescale from 'ml-array-rescale';\n\nimport {\n  checkRowVector,\n  checkRowIndex,\n  checkColumnIndex,\n  checkColumnVector,\n  checkRange,\n  checkIndices,\n} from './util';\nimport {\n  sumByRow,\n  sumByColumn,\n  sumAll,\n  productByRow,\n  productByColumn,\n  productAll,\n  varianceByRow,\n  varianceByColumn,\n  varianceAll,\n  centerByRow,\n  centerByColumn,\n  centerAll,\n  scaleByRow,\n  scaleByColumn,\n  scaleAll,\n  getScaleByRow,\n  getScaleByColumn,\n  getScaleAll,\n} from './stat';\nimport { inspectMatrix } from './inspect';\nimport { installMathOperations } from './mathOperations';\n\nexport class AbstractMatrix {\n  static from1DArray(newRows, newColumns, newData) {\n    let length = newRows * newColumns;\n    if (length !== newData.length) {\n      throw new RangeError('data length does not match given dimensions');\n    }\n    let newMatrix = new Matrix(newRows, newColumns);\n    for (let row = 0; row < newRows; row++) {\n      for (let column = 0; column < newColumns; column++) {\n        newMatrix.set(row, column, newData[row * newColumns + column]);\n      }\n    }\n    return newMatrix;\n  }\n\n  static rowVector(newData) {\n    let vector = new Matrix(1, newData.length);\n    for (let i = 0; i < newData.length; i++) {\n      vector.set(0, i, newData[i]);\n    }\n    return vector;\n  }\n\n  static columnVector(newData) {\n    let vector = new Matrix(newData.length, 1);\n    for (let i = 0; i < newData.length; i++) {\n      vector.set(i, 0, newData[i]);\n    }\n    return vector;\n  }\n\n  static zeros(rows, columns) {\n    return new Matrix(rows, columns);\n  }\n\n  static ones(rows, columns) {\n    return new Matrix(rows, columns).fill(1);\n  }\n\n  static rand(rows, columns, options = {}) {\n    if (typeof options !== 'object') {\n      throw new TypeError('options must be an object');\n    }\n    const { random = Math.random } = options;\n    let matrix = new Matrix(rows, columns);\n    for (let i = 0; i < rows; i++) {\n      for (let j = 0; j < columns; j++) {\n        matrix.set(i, j, random());\n      }\n    }\n    return matrix;\n  }\n\n  static randInt(rows, columns, options = {}) {\n    if (typeof options !== 'object') {\n      throw new TypeError('options must be an object');\n    }\n    const { min = 0, max = 1000, random = Math.random } = options;\n    if (!Number.isInteger(min)) throw new TypeError('min must be an integer');\n    if (!Number.isInteger(max)) throw new TypeError('max must be an integer');\n    if (min >= max) throw new RangeError('min must be smaller than max');\n    let interval = max - min;\n    let matrix = new Matrix(rows, columns);\n    for (let i = 0; i < rows; i++) {\n      for (let j = 0; j < columns; j++) {\n        let value = min + Math.round(random() * interval);\n        matrix.set(i, j, value);\n      }\n    }\n    return matrix;\n  }\n\n  static eye(rows, columns, value) {\n    if (columns === undefined) columns = rows;\n    if (value === undefined) value = 1;\n    let min = Math.min(rows, columns);\n    let matrix = this.zeros(rows, columns);\n    for (let i = 0; i < min; i++) {\n      matrix.set(i, i, value);\n    }\n    return matrix;\n  }\n\n  static diag(data, rows, columns) {\n    let l = data.length;\n    if (rows === undefined) rows = l;\n    if (columns === undefined) columns = rows;\n    let min = Math.min(l, rows, columns);\n    let matrix = this.zeros(rows, columns);\n    for (let i = 0; i < min; i++) {\n      matrix.set(i, i, data[i]);\n    }\n    return matrix;\n  }\n\n  static min(matrix1, matrix2) {\n    matrix1 = this.checkMatrix(matrix1);\n    matrix2 = this.checkMatrix(matrix2);\n    let rows = matrix1.rows;\n    let columns = matrix1.columns;\n    let result = new Matrix(rows, columns);\n    for (let i = 0; i < rows; i++) {\n      for (let j = 0; j < columns; j++) {\n        result.set(i, j, Math.min(matrix1.get(i, j), matrix2.get(i, j)));\n      }\n    }\n    return result;\n  }\n\n  static max(matrix1, matrix2) {\n    matrix1 = this.checkMatrix(matrix1);\n    matrix2 = this.checkMatrix(matrix2);\n    let rows = matrix1.rows;\n    let columns = matrix1.columns;\n    let result = new this(rows, columns);\n    for (let i = 0; i < rows; i++) {\n      for (let j = 0; j < columns; j++) {\n        result.set(i, j, Math.max(matrix1.get(i, j), matrix2.get(i, j)));\n      }\n    }\n    return result;\n  }\n\n  static checkMatrix(value) {\n    return AbstractMatrix.isMatrix(value) ? value : new Matrix(value);\n  }\n\n  static isMatrix(value) {\n    return value != null && value.klass === 'Matrix';\n  }\n\n  get size() {\n    return this.rows * this.columns;\n  }\n\n  apply(callback) {\n    if (typeof callback !== 'function') {\n      throw new TypeError('callback must be a function');\n    }\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        callback.call(this, i, j);\n      }\n    }\n    return this;\n  }\n\n  to1DArray() {\n    let array = [];\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        array.push(this.get(i, j));\n      }\n    }\n    return array;\n  }\n\n  to2DArray() {\n    let copy = [];\n    for (let i = 0; i < this.rows; i++) {\n      copy.push([]);\n      for (let j = 0; j < this.columns; j++) {\n        copy[i].push(this.get(i, j));\n      }\n    }\n    return copy;\n  }\n\n  toJSON() {\n    return this.to2DArray();\n  }\n\n  isRowVector() {\n    return this.rows === 1;\n  }\n\n  isColumnVector() {\n    return this.columns === 1;\n  }\n\n  isVector() {\n    return this.rows === 1 || this.columns === 1;\n  }\n\n  isSquare() {\n    return this.rows === this.columns;\n  }\n\n  isSymmetric() {\n    if (this.isSquare()) {\n      for (let i = 0; i < this.rows; i++) {\n        for (let j = 0; j <= i; j++) {\n          if (this.get(i, j) !== this.get(j, i)) {\n            return false;\n          }\n        }\n      }\n      return true;\n    }\n    return false;\n  }\n\n  isEchelonForm() {\n    let i = 0;\n    let j = 0;\n    let previousColumn = -1;\n    let isEchelonForm = true;\n    let checked = false;\n    while (i < this.rows && isEchelonForm) {\n      j = 0;\n      checked = false;\n      while (j < this.columns && checked === false) {\n        if (this.get(i, j) === 0) {\n          j++;\n        } else if (this.get(i, j) === 1 && j > previousColumn) {\n          checked = true;\n          previousColumn = j;\n        } else {\n          isEchelonForm = false;\n          checked = true;\n        }\n      }\n      i++;\n    }\n    return isEchelonForm;\n  }\n\n  isReducedEchelonForm() {\n    let i = 0;\n    let j = 0;\n    let previousColumn = -1;\n    let isReducedEchelonForm = true;\n    let checked = false;\n    while (i < this.rows && isReducedEchelonForm) {\n      j = 0;\n      checked = false;\n      while (j < this.columns && checked === false) {\n        if (this.get(i, j) === 0) {\n          j++;\n        } else if (this.get(i, j) === 1 && j > previousColumn) {\n          checked = true;\n          previousColumn = j;\n        } else {\n          isReducedEchelonForm = false;\n          checked = true;\n        }\n      }\n      for (let k = j + 1; k < this.rows; k++) {\n        if (this.get(i, k) !== 0) {\n          isReducedEchelonForm = false;\n        }\n      }\n      i++;\n    }\n    return isReducedEchelonForm;\n  }\n\n  echelonForm() {\n    let result = this.clone();\n    let h = 0;\n    let k = 0;\n    while (h < result.rows && k < result.columns) {\n      let iMax = h;\n      for (let i = h; i < result.rows; i++) {\n        if (result.get(i, k) > result.get(iMax, k)) {\n          iMax = i;\n        }\n      }\n      if (result.get(iMax, k) === 0) {\n        k++;\n      } else {\n        result.swapRows(h, iMax);\n        let tmp = result.get(h, k);\n        for (let j = k; j < result.columns; j++) {\n          result.set(h, j, result.get(h, j) / tmp);\n        }\n        for (let i = h + 1; i < result.rows; i++) {\n          let factor = result.get(i, k) / result.get(h, k);\n          result.set(i, k, 0);\n          for (let j = k + 1; j < result.columns; j++) {\n            result.set(i, j, result.get(i, j) - result.get(h, j) * factor);\n          }\n        }\n        h++;\n        k++;\n      }\n    }\n    return result;\n  }\n\n  reducedEchelonForm() {\n    let result = this.echelonForm();\n    let m = result.columns;\n    let n = result.rows;\n    let h = n - 1;\n    while (h >= 0) {\n      if (result.maxRow(h) === 0) {\n        h--;\n      } else {\n        let p = 0;\n        let pivot = false;\n        while (p < n && pivot === false) {\n          if (result.get(h, p) === 1) {\n            pivot = true;\n          } else {\n            p++;\n          }\n        }\n        for (let i = 0; i < h; i++) {\n          let factor = result.get(i, p);\n          for (let j = p; j < m; j++) {\n            let tmp = result.get(i, j) - factor * result.get(h, j);\n            result.set(i, j, tmp);\n          }\n        }\n        h--;\n      }\n    }\n    return result;\n  }\n\n  set() {\n    throw new Error('set method is unimplemented');\n  }\n\n  get() {\n    throw new Error('get method is unimplemented');\n  }\n\n  repeat(options = {}) {\n    if (typeof options !== 'object') {\n      throw new TypeError('options must be an object');\n    }\n    const { rows = 1, columns = 1 } = options;\n    if (!Number.isInteger(rows) || rows <= 0) {\n      throw new TypeError('rows must be a positive integer');\n    }\n    if (!Number.isInteger(columns) || columns <= 0) {\n      throw new TypeError('columns must be a positive integer');\n    }\n    let matrix = new Matrix(this.rows * rows, this.columns * columns);\n    for (let i = 0; i < rows; i++) {\n      for (let j = 0; j < columns; j++) {\n        matrix.setSubMatrix(this, this.rows * i, this.columns * j);\n      }\n    }\n    return matrix;\n  }\n\n  fill(value) {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, value);\n      }\n    }\n    return this;\n  }\n\n  neg() {\n    return this.mulS(-1);\n  }\n\n  getRow(index) {\n    checkRowIndex(this, index);\n    let row = [];\n    for (let i = 0; i < this.columns; i++) {\n      row.push(this.get(index, i));\n    }\n    return row;\n  }\n\n  getRowVector(index) {\n    return Matrix.rowVector(this.getRow(index));\n  }\n\n  setRow(index, array) {\n    checkRowIndex(this, index);\n    array = checkRowVector(this, array);\n    for (let i = 0; i < this.columns; i++) {\n      this.set(index, i, array[i]);\n    }\n    return this;\n  }\n\n  swapRows(row1, row2) {\n    checkRowIndex(this, row1);\n    checkRowIndex(this, row2);\n    for (let i = 0; i < this.columns; i++) {\n      let temp = this.get(row1, i);\n      this.set(row1, i, this.get(row2, i));\n      this.set(row2, i, temp);\n    }\n    return this;\n  }\n\n  getColumn(index) {\n    checkColumnIndex(this, index);\n    let column = [];\n    for (let i = 0; i < this.rows; i++) {\n      column.push(this.get(i, index));\n    }\n    return column;\n  }\n\n  getColumnVector(index) {\n    return Matrix.columnVector(this.getColumn(index));\n  }\n\n  setColumn(index, array) {\n    checkColumnIndex(this, index);\n    array = checkColumnVector(this, array);\n    for (let i = 0; i < this.rows; i++) {\n      this.set(i, index, array[i]);\n    }\n    return this;\n  }\n\n  swapColumns(column1, column2) {\n    checkColumnIndex(this, column1);\n    checkColumnIndex(this, column2);\n    for (let i = 0; i < this.rows; i++) {\n      let temp = this.get(i, column1);\n      this.set(i, column1, this.get(i, column2));\n      this.set(i, column2, temp);\n    }\n    return this;\n  }\n\n  addRowVector(vector) {\n    vector = checkRowVector(this, vector);\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) + vector[j]);\n      }\n    }\n    return this;\n  }\n\n  subRowVector(vector) {\n    vector = checkRowVector(this, vector);\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) - vector[j]);\n      }\n    }\n    return this;\n  }\n\n  mulRowVector(vector) {\n    vector = checkRowVector(this, vector);\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) * vector[j]);\n      }\n    }\n    return this;\n  }\n\n  divRowVector(vector) {\n    vector = checkRowVector(this, vector);\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) / vector[j]);\n      }\n    }\n    return this;\n  }\n\n  addColumnVector(vector) {\n    vector = checkColumnVector(this, vector);\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) + vector[i]);\n      }\n    }\n    return this;\n  }\n\n  subColumnVector(vector) {\n    vector = checkColumnVector(this, vector);\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) - vector[i]);\n      }\n    }\n    return this;\n  }\n\n  mulColumnVector(vector) {\n    vector = checkColumnVector(this, vector);\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) * vector[i]);\n      }\n    }\n    return this;\n  }\n\n  divColumnVector(vector) {\n    vector = checkColumnVector(this, vector);\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) / vector[i]);\n      }\n    }\n    return this;\n  }\n\n  mulRow(index, value) {\n    checkRowIndex(this, index);\n    for (let i = 0; i < this.columns; i++) {\n      this.set(index, i, this.get(index, i) * value);\n    }\n    return this;\n  }\n\n  mulColumn(index, value) {\n    checkColumnIndex(this, index);\n    for (let i = 0; i < this.rows; i++) {\n      this.set(i, index, this.get(i, index) * value);\n    }\n    return this;\n  }\n\n  max() {\n    let v = this.get(0, 0);\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        if (this.get(i, j) > v) {\n          v = this.get(i, j);\n        }\n      }\n    }\n    return v;\n  }\n\n  maxIndex() {\n    let v = this.get(0, 0);\n    let idx = [0, 0];\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        if (this.get(i, j) > v) {\n          v = this.get(i, j);\n          idx[0] = i;\n          idx[1] = j;\n        }\n      }\n    }\n    return idx;\n  }\n\n  min() {\n    let v = this.get(0, 0);\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        if (this.get(i, j) < v) {\n          v = this.get(i, j);\n        }\n      }\n    }\n    return v;\n  }\n\n  minIndex() {\n    let v = this.get(0, 0);\n    let idx = [0, 0];\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        if (this.get(i, j) < v) {\n          v = this.get(i, j);\n          idx[0] = i;\n          idx[1] = j;\n        }\n      }\n    }\n    return idx;\n  }\n\n  maxRow(row) {\n    checkRowIndex(this, row);\n    let v = this.get(row, 0);\n    for (let i = 1; i < this.columns; i++) {\n      if (this.get(row, i) > v) {\n        v = this.get(row, i);\n      }\n    }\n    return v;\n  }\n\n  maxRowIndex(row) {\n    checkRowIndex(this, row);\n    let v = this.get(row, 0);\n    let idx = [row, 0];\n    for (let i = 1; i < this.columns; i++) {\n      if (this.get(row, i) > v) {\n        v = this.get(row, i);\n        idx[1] = i;\n      }\n    }\n    return idx;\n  }\n\n  minRow(row) {\n    checkRowIndex(this, row);\n    let v = this.get(row, 0);\n    for (let i = 1; i < this.columns; i++) {\n      if (this.get(row, i) < v) {\n        v = this.get(row, i);\n      }\n    }\n    return v;\n  }\n\n  minRowIndex(row) {\n    checkRowIndex(this, row);\n    let v = this.get(row, 0);\n    let idx = [row, 0];\n    for (let i = 1; i < this.columns; i++) {\n      if (this.get(row, i) < v) {\n        v = this.get(row, i);\n        idx[1] = i;\n      }\n    }\n    return idx;\n  }\n\n  maxColumn(column) {\n    checkColumnIndex(this, column);\n    let v = this.get(0, column);\n    for (let i = 1; i < this.rows; i++) {\n      if (this.get(i, column) > v) {\n        v = this.get(i, column);\n      }\n    }\n    return v;\n  }\n\n  maxColumnIndex(column) {\n    checkColumnIndex(this, column);\n    let v = this.get(0, column);\n    let idx = [0, column];\n    for (let i = 1; i < this.rows; i++) {\n      if (this.get(i, column) > v) {\n        v = this.get(i, column);\n        idx[0] = i;\n      }\n    }\n    return idx;\n  }\n\n  minColumn(column) {\n    checkColumnIndex(this, column);\n    let v = this.get(0, column);\n    for (let i = 1; i < this.rows; i++) {\n      if (this.get(i, column) < v) {\n        v = this.get(i, column);\n      }\n    }\n    return v;\n  }\n\n  minColumnIndex(column) {\n    checkColumnIndex(this, column);\n    let v = this.get(0, column);\n    let idx = [0, column];\n    for (let i = 1; i < this.rows; i++) {\n      if (this.get(i, column) < v) {\n        v = this.get(i, column);\n        idx[0] = i;\n      }\n    }\n    return idx;\n  }\n\n  diag() {\n    let min = Math.min(this.rows, this.columns);\n    let diag = [];\n    for (let i = 0; i < min; i++) {\n      diag.push(this.get(i, i));\n    }\n    return diag;\n  }\n\n  norm(type = 'frobenius') {\n    let result = 0;\n    if (type === 'max') {\n      return this.max();\n    } else if (type === 'frobenius') {\n      for (let i = 0; i < this.rows; i++) {\n        for (let j = 0; j < this.columns; j++) {\n          result = result + this.get(i, j) * this.get(i, j);\n        }\n      }\n      return Math.sqrt(result);\n    } else {\n      throw new RangeError(`unknown norm type: ${type}`);\n    }\n  }\n\n  cumulativeSum() {\n    let sum = 0;\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        sum += this.get(i, j);\n        this.set(i, j, sum);\n      }\n    }\n    return this;\n  }\n\n  dot(vector2) {\n    if (AbstractMatrix.isMatrix(vector2)) vector2 = vector2.to1DArray();\n    let vector1 = this.to1DArray();\n    if (vector1.length !== vector2.length) {\n      throw new RangeError('vectors do not have the same size');\n    }\n    let dot = 0;\n    for (let i = 0; i < vector1.length; i++) {\n      dot += vector1[i] * vector2[i];\n    }\n    return dot;\n  }\n\n  mmul(other) {\n    other = Matrix.checkMatrix(other);\n\n    let m = this.rows;\n    let n = this.columns;\n    let p = other.columns;\n\n    let result = new Matrix(m, p);\n\n    let Bcolj = new Float64Array(n);\n    for (let j = 0; j < p; j++) {\n      for (let k = 0; k < n; k++) {\n        Bcolj[k] = other.get(k, j);\n      }\n\n      for (let i = 0; i < m; i++) {\n        let s = 0;\n        for (let k = 0; k < n; k++) {\n          s += this.get(i, k) * Bcolj[k];\n        }\n\n        result.set(i, j, s);\n      }\n    }\n    return result;\n  }\n\n  strassen2x2(other) {\n    other = Matrix.checkMatrix(other);\n    let result = new Matrix(2, 2);\n    const a11 = this.get(0, 0);\n    const b11 = other.get(0, 0);\n    const a12 = this.get(0, 1);\n    const b12 = other.get(0, 1);\n    const a21 = this.get(1, 0);\n    const b21 = other.get(1, 0);\n    const a22 = this.get(1, 1);\n    const b22 = other.get(1, 1);\n\n    // Compute intermediate values.\n    const m1 = (a11 + a22) * (b11 + b22);\n    const m2 = (a21 + a22) * b11;\n    const m3 = a11 * (b12 - b22);\n    const m4 = a22 * (b21 - b11);\n    const m5 = (a11 + a12) * b22;\n    const m6 = (a21 - a11) * (b11 + b12);\n    const m7 = (a12 - a22) * (b21 + b22);\n\n    // Combine intermediate values into the output.\n    const c00 = m1 + m4 - m5 + m7;\n    const c01 = m3 + m5;\n    const c10 = m2 + m4;\n    const c11 = m1 - m2 + m3 + m6;\n\n    result.set(0, 0, c00);\n    result.set(0, 1, c01);\n    result.set(1, 0, c10);\n    result.set(1, 1, c11);\n    return result;\n  }\n\n  strassen3x3(other) {\n    other = Matrix.checkMatrix(other);\n    let result = new Matrix(3, 3);\n\n    const a00 = this.get(0, 0);\n    const a01 = this.get(0, 1);\n    const a02 = this.get(0, 2);\n    const a10 = this.get(1, 0);\n    const a11 = this.get(1, 1);\n    const a12 = this.get(1, 2);\n    const a20 = this.get(2, 0);\n    const a21 = this.get(2, 1);\n    const a22 = this.get(2, 2);\n\n    const b00 = other.get(0, 0);\n    const b01 = other.get(0, 1);\n    const b02 = other.get(0, 2);\n    const b10 = other.get(1, 0);\n    const b11 = other.get(1, 1);\n    const b12 = other.get(1, 2);\n    const b20 = other.get(2, 0);\n    const b21 = other.get(2, 1);\n    const b22 = other.get(2, 2);\n\n    const m1 = (a00 + a01 + a02 - a10 - a11 - a21 - a22) * b11;\n    const m2 = (a00 - a10) * (-b01 + b11);\n    const m3 = a11 * (-b00 + b01 + b10 - b11 - b12 - b20 + b22);\n    const m4 = (-a00 + a10 + a11) * (b00 - b01 + b11);\n    const m5 = (a10 + a11) * (-b00 + b01);\n    const m6 = a00 * b00;\n    const m7 = (-a00 + a20 + a21) * (b00 - b02 + b12);\n    const m8 = (-a00 + a20) * (b02 - b12);\n    const m9 = (a20 + a21) * (-b00 + b02);\n    const m10 = (a00 + a01 + a02 - a11 - a12 - a20 - a21) * b12;\n    const m11 = a21 * (-b00 + b02 + b10 - b11 - b12 - b20 + b21);\n    const m12 = (-a02 + a21 + a22) * (b11 + b20 - b21);\n    const m13 = (a02 - a22) * (b11 - b21);\n    const m14 = a02 * b20;\n    const m15 = (a21 + a22) * (-b20 + b21);\n    const m16 = (-a02 + a11 + a12) * (b12 + b20 - b22);\n    const m17 = (a02 - a12) * (b12 - b22);\n    const m18 = (a11 + a12) * (-b20 + b22);\n    const m19 = a01 * b10;\n    const m20 = a12 * b21;\n    const m21 = a10 * b02;\n    const m22 = a20 * b01;\n    const m23 = a22 * b22;\n\n    const c00 = m6 + m14 + m19;\n    const c01 = m1 + m4 + m5 + m6 + m12 + m14 + m15;\n    const c02 = m6 + m7 + m9 + m10 + m14 + m16 + m18;\n    const c10 = m2 + m3 + m4 + m6 + m14 + m16 + m17;\n    const c11 = m2 + m4 + m5 + m6 + m20;\n    const c12 = m14 + m16 + m17 + m18 + m21;\n    const c20 = m6 + m7 + m8 + m11 + m12 + m13 + m14;\n    const c21 = m12 + m13 + m14 + m15 + m22;\n    const c22 = m6 + m7 + m8 + m9 + m23;\n\n    result.set(0, 0, c00);\n    result.set(0, 1, c01);\n    result.set(0, 2, c02);\n    result.set(1, 0, c10);\n    result.set(1, 1, c11);\n    result.set(1, 2, c12);\n    result.set(2, 0, c20);\n    result.set(2, 1, c21);\n    result.set(2, 2, c22);\n    return result;\n  }\n\n  mmulStrassen(y) {\n    y = Matrix.checkMatrix(y);\n    let x = this.clone();\n    let r1 = x.rows;\n    let c1 = x.columns;\n    let r2 = y.rows;\n    let c2 = y.columns;\n    if (c1 !== r2) {\n      // eslint-disable-next-line no-console\n      console.warn(\n        `Multiplying ${r1} x ${c1} and ${r2} x ${c2} matrix: dimensions do not match.`,\n      );\n    }\n\n    // Put a matrix into the top left of a matrix of zeros.\n    // `rows` and `cols` are the dimensions of the output matrix.\n    function embed(mat, rows, cols) {\n      let r = mat.rows;\n      let c = mat.columns;\n      if (r === rows && c === cols) {\n        return mat;\n      } else {\n        let resultat = AbstractMatrix.zeros(rows, cols);\n        resultat = resultat.setSubMatrix(mat, 0, 0);\n        return resultat;\n      }\n    }\n\n    // Make sure both matrices are the same size.\n    // This is exclusively for simplicity:\n    // this algorithm can be implemented with matrices of different sizes.\n\n    let r = Math.max(r1, r2);\n    let c = Math.max(c1, c2);\n    x = embed(x, r, c);\n    y = embed(y, r, c);\n\n    // Our recursive multiplication function.\n    function blockMult(a, b, rows, cols) {\n      // For small matrices, resort to naive multiplication.\n      if (rows <= 512 || cols <= 512) {\n        return a.mmul(b); // a is equivalent to this\n      }\n\n      // Apply dynamic padding.\n      if (rows % 2 === 1 && cols % 2 === 1) {\n        a = embed(a, rows + 1, cols + 1);\n        b = embed(b, rows + 1, cols + 1);\n      } else if (rows % 2 === 1) {\n        a = embed(a, rows + 1, cols);\n        b = embed(b, rows + 1, cols);\n      } else if (cols % 2 === 1) {\n        a = embed(a, rows, cols + 1);\n        b = embed(b, rows, cols + 1);\n      }\n\n      let halfRows = parseInt(a.rows / 2, 10);\n      let halfCols = parseInt(a.columns / 2, 10);\n      // Subdivide input matrices.\n      let a11 = a.subMatrix(0, halfRows - 1, 0, halfCols - 1);\n      let b11 = b.subMatrix(0, halfRows - 1, 0, halfCols - 1);\n\n      let a12 = a.subMatrix(0, halfRows - 1, halfCols, a.columns - 1);\n      let b12 = b.subMatrix(0, halfRows - 1, halfCols, b.columns - 1);\n\n      let a21 = a.subMatrix(halfRows, a.rows - 1, 0, halfCols - 1);\n      let b21 = b.subMatrix(halfRows, b.rows - 1, 0, halfCols - 1);\n\n      let a22 = a.subMatrix(halfRows, a.rows - 1, halfCols, a.columns - 1);\n      let b22 = b.subMatrix(halfRows, b.rows - 1, halfCols, b.columns - 1);\n\n      // Compute intermediate values.\n      let m1 = blockMult(\n        AbstractMatrix.add(a11, a22),\n        AbstractMatrix.add(b11, b22),\n        halfRows,\n        halfCols,\n      );\n      let m2 = blockMult(AbstractMatrix.add(a21, a22), b11, halfRows, halfCols);\n      let m3 = blockMult(a11, AbstractMatrix.sub(b12, b22), halfRows, halfCols);\n      let m4 = blockMult(a22, AbstractMatrix.sub(b21, b11), halfRows, halfCols);\n      let m5 = blockMult(AbstractMatrix.add(a11, a12), b22, halfRows, halfCols);\n      let m6 = blockMult(\n        AbstractMatrix.sub(a21, a11),\n        AbstractMatrix.add(b11, b12),\n        halfRows,\n        halfCols,\n      );\n      let m7 = blockMult(\n        AbstractMatrix.sub(a12, a22),\n        AbstractMatrix.add(b21, b22),\n        halfRows,\n        halfCols,\n      );\n\n      // Combine intermediate values into the output.\n      let c11 = AbstractMatrix.add(m1, m4);\n      c11.sub(m5);\n      c11.add(m7);\n      let c12 = AbstractMatrix.add(m3, m5);\n      let c21 = AbstractMatrix.add(m2, m4);\n      let c22 = AbstractMatrix.sub(m1, m2);\n      c22.add(m3);\n      c22.add(m6);\n\n      // Crop output to the desired size (undo dynamic padding).\n      let resultat = AbstractMatrix.zeros(2 * c11.rows, 2 * c11.columns);\n      resultat = resultat.setSubMatrix(c11, 0, 0);\n      resultat = resultat.setSubMatrix(c12, c11.rows, 0);\n      resultat = resultat.setSubMatrix(c21, 0, c11.columns);\n      resultat = resultat.setSubMatrix(c22, c11.rows, c11.columns);\n      return resultat.subMatrix(0, rows - 1, 0, cols - 1);\n    }\n    return blockMult(x, y, r, c);\n  }\n\n  scaleRows(options = {}) {\n    if (typeof options !== 'object') {\n      throw new TypeError('options must be an object');\n    }\n    const { min = 0, max = 1 } = options;\n    if (!Number.isFinite(min)) throw new TypeError('min must be a number');\n    if (!Number.isFinite(max)) throw new TypeError('max must be a number');\n    if (min >= max) throw new RangeError('min must be smaller than max');\n    let newMatrix = new Matrix(this.rows, this.columns);\n    for (let i = 0; i < this.rows; i++) {\n      const row = this.getRow(i);\n      rescale(row, { min, max, output: row });\n      newMatrix.setRow(i, row);\n    }\n    return newMatrix;\n  }\n\n  scaleColumns(options = {}) {\n    if (typeof options !== 'object') {\n      throw new TypeError('options must be an object');\n    }\n    const { min = 0, max = 1 } = options;\n    if (!Number.isFinite(min)) throw new TypeError('min must be a number');\n    if (!Number.isFinite(max)) throw new TypeError('max must be a number');\n    if (min >= max) throw new RangeError('min must be smaller than max');\n    let newMatrix = new Matrix(this.rows, this.columns);\n    for (let i = 0; i < this.columns; i++) {\n      const column = this.getColumn(i);\n      rescale(column, {\n        min: min,\n        max: max,\n        output: column,\n      });\n      newMatrix.setColumn(i, column);\n    }\n    return newMatrix;\n  }\n\n  flipRows() {\n    const middle = Math.ceil(this.columns / 2);\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < middle; j++) {\n        let first = this.get(i, j);\n        let last = this.get(i, this.columns - 1 - j);\n        this.set(i, j, last);\n        this.set(i, this.columns - 1 - j, first);\n      }\n    }\n    return this;\n  }\n\n  flipColumns() {\n    const middle = Math.ceil(this.rows / 2);\n    for (let j = 0; j < this.columns; j++) {\n      for (let i = 0; i < middle; i++) {\n        let first = this.get(i, j);\n        let last = this.get(this.rows - 1 - i, j);\n        this.set(i, j, last);\n        this.set(this.rows - 1 - i, j, first);\n      }\n    }\n    return this;\n  }\n\n  kroneckerProduct(other) {\n    other = Matrix.checkMatrix(other);\n\n    let m = this.rows;\n    let n = this.columns;\n    let p = other.rows;\n    let q = other.columns;\n\n    let result = new Matrix(m * p, n * q);\n    for (let i = 0; i < m; i++) {\n      for (let j = 0; j < n; j++) {\n        for (let k = 0; k < p; k++) {\n          for (let l = 0; l < q; l++) {\n            result.set(p * i + k, q * j + l, this.get(i, j) * other.get(k, l));\n          }\n        }\n      }\n    }\n    return result;\n  }\n\n  transpose() {\n    let result = new Matrix(this.columns, this.rows);\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        result.set(j, i, this.get(i, j));\n      }\n    }\n    return result;\n  }\n\n  sortRows(compareFunction = compareNumbers) {\n    for (let i = 0; i < this.rows; i++) {\n      this.setRow(i, this.getRow(i).sort(compareFunction));\n    }\n    return this;\n  }\n\n  sortColumns(compareFunction = compareNumbers) {\n    for (let i = 0; i < this.columns; i++) {\n      this.setColumn(i, this.getColumn(i).sort(compareFunction));\n    }\n    return this;\n  }\n\n  subMatrix(startRow, endRow, startColumn, endColumn) {\n    checkRange(this, startRow, endRow, startColumn, endColumn);\n    let newMatrix = new Matrix(\n      endRow - startRow + 1,\n      endColumn - startColumn + 1,\n    );\n    for (let i = startRow; i <= endRow; i++) {\n      for (let j = startColumn; j <= endColumn; j++) {\n        newMatrix.set(i - startRow, j - startColumn, this.get(i, j));\n      }\n    }\n    return newMatrix;\n  }\n\n  subMatrixRow(indices, startColumn, endColumn) {\n    if (startColumn === undefined) startColumn = 0;\n    if (endColumn === undefined) endColumn = this.columns - 1;\n    if (\n      startColumn > endColumn ||\n      startColumn < 0 ||\n      startColumn >= this.columns ||\n      endColumn < 0 ||\n      endColumn >= this.columns\n    ) {\n      throw new RangeError('Argument out of range');\n    }\n\n    let newMatrix = new Matrix(indices.length, endColumn - startColumn + 1);\n    for (let i = 0; i < indices.length; i++) {\n      for (let j = startColumn; j <= endColumn; j++) {\n        if (indices[i] < 0 || indices[i] >= this.rows) {\n          throw new RangeError(`Row index out of range: ${indices[i]}`);\n        }\n        newMatrix.set(i, j - startColumn, this.get(indices[i], j));\n      }\n    }\n    return newMatrix;\n  }\n\n  subMatrixColumn(indices, startRow, endRow) {\n    if (startRow === undefined) startRow = 0;\n    if (endRow === undefined) endRow = this.rows - 1;\n    if (\n      startRow > endRow ||\n      startRow < 0 ||\n      startRow >= this.rows ||\n      endRow < 0 ||\n      endRow >= this.rows\n    ) {\n      throw new RangeError('Argument out of range');\n    }\n\n    let newMatrix = new Matrix(endRow - startRow + 1, indices.length);\n    for (let i = 0; i < indices.length; i++) {\n      for (let j = startRow; j <= endRow; j++) {\n        if (indices[i] < 0 || indices[i] >= this.columns) {\n          throw new RangeError(`Column index out of range: ${indices[i]}`);\n        }\n        newMatrix.set(j - startRow, i, this.get(j, indices[i]));\n      }\n    }\n    return newMatrix;\n  }\n\n  setSubMatrix(matrix, startRow, startColumn) {\n    matrix = Matrix.checkMatrix(matrix);\n    let endRow = startRow + matrix.rows - 1;\n    let endColumn = startColumn + matrix.columns - 1;\n    checkRange(this, startRow, endRow, startColumn, endColumn);\n    for (let i = 0; i < matrix.rows; i++) {\n      for (let j = 0; j < matrix.columns; j++) {\n        this.set(startRow + i, startColumn + j, matrix.get(i, j));\n      }\n    }\n    return this;\n  }\n\n  selection(rowIndices, columnIndices) {\n    let indices = checkIndices(this, rowIndices, columnIndices);\n    let newMatrix = new Matrix(rowIndices.length, columnIndices.length);\n    for (let i = 0; i < indices.row.length; i++) {\n      let rowIndex = indices.row[i];\n      for (let j = 0; j < indices.column.length; j++) {\n        let columnIndex = indices.column[j];\n        newMatrix.set(i, j, this.get(rowIndex, columnIndex));\n      }\n    }\n    return newMatrix;\n  }\n\n  trace() {\n    let min = Math.min(this.rows, this.columns);\n    let trace = 0;\n    for (let i = 0; i < min; i++) {\n      trace += this.get(i, i);\n    }\n    return trace;\n  }\n\n  clone() {\n    let newMatrix = new Matrix(this.rows, this.columns);\n    for (let row = 0; row < this.rows; row++) {\n      for (let column = 0; column < this.columns; column++) {\n        newMatrix.set(row, column, this.get(row, column));\n      }\n    }\n    return newMatrix;\n  }\n\n  sum(by) {\n    switch (by) {\n      case 'row':\n        return sumByRow(this);\n      case 'column':\n        return sumByColumn(this);\n      case undefined:\n        return sumAll(this);\n      default:\n        throw new Error(`invalid option: ${by}`);\n    }\n  }\n\n  product(by) {\n    switch (by) {\n      case 'row':\n        return productByRow(this);\n      case 'column':\n        return productByColumn(this);\n      case undefined:\n        return productAll(this);\n      default:\n        throw new Error(`invalid option: ${by}`);\n    }\n  }\n\n  mean(by) {\n    const sum = this.sum(by);\n    switch (by) {\n      case 'row': {\n        for (let i = 0; i < this.rows; i++) {\n          sum[i] /= this.columns;\n        }\n        return sum;\n      }\n      case 'column': {\n        for (let i = 0; i < this.columns; i++) {\n          sum[i] /= this.rows;\n        }\n        return sum;\n      }\n      case undefined:\n        return sum / this.size;\n      default:\n        throw new Error(`invalid option: ${by}`);\n    }\n  }\n\n  variance(by, options = {}) {\n    if (typeof by === 'object') {\n      options = by;\n      by = undefined;\n    }\n    if (typeof options !== 'object') {\n      throw new TypeError('options must be an object');\n    }\n    const { unbiased = true, mean = this.mean(by) } = options;\n    if (typeof unbiased !== 'boolean') {\n      throw new TypeError('unbiased must be a boolean');\n    }\n    switch (by) {\n      case 'row': {\n        if (!Array.isArray(mean)) {\n          throw new TypeError('mean must be an array');\n        }\n        return varianceByRow(this, unbiased, mean);\n      }\n      case 'column': {\n        if (!Array.isArray(mean)) {\n          throw new TypeError('mean must be an array');\n        }\n        return varianceByColumn(this, unbiased, mean);\n      }\n      case undefined: {\n        if (typeof mean !== 'number') {\n          throw new TypeError('mean must be a number');\n        }\n        return varianceAll(this, unbiased, mean);\n      }\n      default:\n        throw new Error(`invalid option: ${by}`);\n    }\n  }\n\n  standardDeviation(by, options) {\n    if (typeof by === 'object') {\n      options = by;\n      by = undefined;\n    }\n    const variance = this.variance(by, options);\n    if (by === undefined) {\n      return Math.sqrt(variance);\n    } else {\n      for (let i = 0; i < variance.length; i++) {\n        variance[i] = Math.sqrt(variance[i]);\n      }\n      return variance;\n    }\n  }\n\n  center(by, options = {}) {\n    if (typeof by === 'object') {\n      options = by;\n      by = undefined;\n    }\n    if (typeof options !== 'object') {\n      throw new TypeError('options must be an object');\n    }\n    const { center = this.mean(by) } = options;\n    switch (by) {\n      case 'row': {\n        if (!Array.isArray(center)) {\n          throw new TypeError('center must be an array');\n        }\n        centerByRow(this, center);\n        return this;\n      }\n      case 'column': {\n        if (!Array.isArray(center)) {\n          throw new TypeError('center must be an array');\n        }\n        centerByColumn(this, center);\n        return this;\n      }\n      case undefined: {\n        if (typeof center !== 'number') {\n          throw new TypeError('center must be a number');\n        }\n        centerAll(this, center);\n        return this;\n      }\n      default:\n        throw new Error(`invalid option: ${by}`);\n    }\n  }\n\n  scale(by, options = {}) {\n    if (typeof by === 'object') {\n      options = by;\n      by = undefined;\n    }\n    if (typeof options !== 'object') {\n      throw new TypeError('options must be an object');\n    }\n    let scale = options.scale;\n    switch (by) {\n      case 'row': {\n        if (scale === undefined) {\n          scale = getScaleByRow(this);\n        } else if (!Array.isArray(scale)) {\n          throw new TypeError('scale must be an array');\n        }\n        scaleByRow(this, scale);\n        return this;\n      }\n      case 'column': {\n        if (scale === undefined) {\n          scale = getScaleByColumn(this);\n        } else if (!Array.isArray(scale)) {\n          throw new TypeError('scale must be an array');\n        }\n        scaleByColumn(this, scale);\n        return this;\n      }\n      case undefined: {\n        if (scale === undefined) {\n          scale = getScaleAll(this);\n        } else if (typeof scale !== 'number') {\n          throw new TypeError('scale must be a number');\n        }\n        scaleAll(this, scale);\n        return this;\n      }\n      default:\n        throw new Error(`invalid option: ${by}`);\n    }\n  }\n}\n\nAbstractMatrix.prototype.klass = 'Matrix';\nif (typeof Symbol !== 'undefined') {\n  AbstractMatrix.prototype[\n    Symbol.for('nodejs.util.inspect.custom')\n  ] = inspectMatrix;\n}\n\nfunction compareNumbers(a, b) {\n  return a - b;\n}\n\n// Synonyms\nAbstractMatrix.random = AbstractMatrix.rand;\nAbstractMatrix.randomInt = AbstractMatrix.randInt;\nAbstractMatrix.diagonal = AbstractMatrix.diag;\nAbstractMatrix.prototype.diagonal = AbstractMatrix.prototype.diag;\nAbstractMatrix.identity = AbstractMatrix.eye;\nAbstractMatrix.prototype.negate = AbstractMatrix.prototype.neg;\nAbstractMatrix.prototype.tensorProduct =\n  AbstractMatrix.prototype.kroneckerProduct;\n\nexport default class Matrix extends AbstractMatrix {\n  constructor(nRows, nColumns) {\n    super();\n    if (Matrix.isMatrix(nRows)) {\n      return nRows.clone();\n    } else if (Number.isInteger(nRows) && nRows > 0) {\n      // Create an empty matrix\n      this.data = [];\n      if (Number.isInteger(nColumns) && nColumns > 0) {\n        for (let i = 0; i < nRows; i++) {\n          this.data.push(new Float64Array(nColumns));\n        }\n      } else {\n        throw new TypeError('nColumns must be a positive integer');\n      }\n    } else if (Array.isArray(nRows)) {\n      // Copy the values from the 2D array\n      const arrayData = nRows;\n      nRows = arrayData.length;\n      nColumns = arrayData[0].length;\n      if (typeof nColumns !== 'number' || nColumns === 0) {\n        throw new TypeError(\n          'Data must be a 2D array with at least one element',\n        );\n      }\n      this.data = [];\n      for (let i = 0; i < nRows; i++) {\n        if (arrayData[i].length !== nColumns) {\n          throw new RangeError('Inconsistent array dimensions');\n        }\n        this.data.push(Float64Array.from(arrayData[i]));\n      }\n    } else {\n      throw new TypeError(\n        'First argument must be a positive number or an array',\n      );\n    }\n    this.rows = nRows;\n    this.columns = nColumns;\n    return this;\n  }\n\n  set(rowIndex, columnIndex, value) {\n    this.data[rowIndex][columnIndex] = value;\n    return this;\n  }\n\n  get(rowIndex, columnIndex) {\n    return this.data[rowIndex][columnIndex];\n  }\n\n  removeRow(index) {\n    checkRowIndex(this, index);\n    if (this.rows === 1) {\n      throw new RangeError('A matrix cannot have less than one row');\n    }\n    this.data.splice(index, 1);\n    this.rows -= 1;\n    return this;\n  }\n\n  addRow(index, array) {\n    if (array === undefined) {\n      array = index;\n      index = this.rows;\n    }\n    checkRowIndex(this, index, true);\n    array = Float64Array.from(checkRowVector(this, array, true));\n    this.data.splice(index, 0, array);\n    this.rows += 1;\n    return this;\n  }\n\n  removeColumn(index) {\n    checkColumnIndex(this, index);\n    if (this.columns === 1) {\n      throw new RangeError('A matrix cannot have less than one column');\n    }\n    for (let i = 0; i < this.rows; i++) {\n      const newRow = new Float64Array(this.columns - 1);\n      for (let j = 0; j < index; j++) {\n        newRow[j] = this.data[i][j];\n      }\n      for (let j = index + 1; j < this.columns; j++) {\n        newRow[j - 1] = this.data[i][j];\n      }\n      this.data[i] = newRow;\n    }\n    this.columns -= 1;\n    return this;\n  }\n\n  addColumn(index, array) {\n    if (typeof array === 'undefined') {\n      array = index;\n      index = this.columns;\n    }\n    checkColumnIndex(this, index, true);\n    array = checkColumnVector(this, array);\n    for (let i = 0; i < this.rows; i++) {\n      const newRow = new Float64Array(this.columns + 1);\n      let j = 0;\n      for (; j < index; j++) {\n        newRow[j] = this.data[i][j];\n      }\n      newRow[j++] = array[i];\n      for (; j < this.columns + 1; j++) {\n        newRow[j] = this.data[i][j - 1];\n      }\n      this.data[i] = newRow;\n    }\n    this.columns += 1;\n    return this;\n  }\n}\n\ninstallMathOperations(AbstractMatrix, Matrix);\n","import { AbstractMatrix } from '../matrix';\n\nexport default class BaseView extends AbstractMatrix {\n  constructor(matrix, rows, columns) {\n    super();\n    this.matrix = matrix;\n    this.rows = rows;\n    this.columns = columns;\n  }\n}\n","import { checkColumnIndex } from '../util';\n\nimport BaseView from './base';\n\nexport default class MatrixColumnView extends BaseView {\n  constructor(matrix, column) {\n    checkColumnIndex(matrix, column);\n    super(matrix, matrix.rows, 1);\n    this.column = column;\n  }\n\n  set(rowIndex, columnIndex, value) {\n    this.matrix.set(rowIndex, this.column, value);\n    return this;\n  }\n\n  get(rowIndex) {\n    return this.matrix.get(rowIndex, this.column);\n  }\n}\n","import { checkColumnIndices } from '../util';\r\n\r\nimport BaseView from './base';\r\n\r\nexport default class MatrixColumnSelectionView extends BaseView {\r\n  constructor(matrix, columnIndices) {\r\n    columnIndices = checkColumnIndices(matrix, columnIndices);\r\n    super(matrix, matrix.rows, columnIndices.length);\r\n    this.columnIndices = columnIndices;\r\n  }\r\n\r\n  set(rowIndex, columnIndex, value) {\r\n    this.matrix.set(rowIndex, this.columnIndices[columnIndex], value);\r\n    return this;\r\n  }\r\n\r\n  get(rowIndex, columnIndex) {\r\n    return this.matrix.get(rowIndex, this.columnIndices[columnIndex]);\r\n  }\r\n}\r\n","import BaseView from './base';\r\n\r\nexport default class MatrixFlipColumnView extends BaseView {\r\n  constructor(matrix) {\r\n    super(matrix, matrix.rows, matrix.columns);\r\n  }\r\n\r\n  set(rowIndex, columnIndex, value) {\r\n    this.matrix.set(rowIndex, this.columns - columnIndex - 1, value);\r\n    return this;\r\n  }\r\n\r\n  get(rowIndex, columnIndex) {\r\n    return this.matrix.get(rowIndex, this.columns - columnIndex - 1);\r\n  }\r\n}\r\n","import BaseView from './base';\r\n\r\nexport default class MatrixFlipRowView extends BaseView {\r\n  constructor(matrix) {\r\n    super(matrix, matrix.rows, matrix.columns);\r\n  }\r\n\r\n  set(rowIndex, columnIndex, value) {\r\n    this.matrix.set(this.rows - rowIndex - 1, columnIndex, value);\r\n    return this;\r\n  }\r\n\r\n  get(rowIndex, columnIndex) {\r\n    return this.matrix.get(this.rows - rowIndex - 1, columnIndex);\r\n  }\r\n}\r\n","import { checkRowIndex } from '../util';\n\nimport BaseView from './base';\n\nexport default class MatrixRowView extends BaseView {\n  constructor(matrix, row) {\n    checkRowIndex(matrix, row);\n    super(matrix, 1, matrix.columns);\n    this.row = row;\n  }\n\n  set(rowIndex, columnIndex, value) {\n    this.matrix.set(this.row, columnIndex, value);\n    return this;\n  }\n\n  get(rowIndex, columnIndex) {\n    return this.matrix.get(this.row, columnIndex);\n  }\n}\n","import { checkRowIndices } from '../util';\r\n\r\nimport BaseView from './base';\r\n\r\nexport default class MatrixRowSelectionView extends BaseView {\r\n  constructor(matrix, rowIndices) {\r\n    rowIndices = checkRowIndices(matrix, rowIndices);\r\n    super(matrix, rowIndices.length, matrix.columns);\r\n    this.rowIndices = rowIndices;\r\n  }\r\n\r\n  set(rowIndex, columnIndex, value) {\r\n    this.matrix.set(this.rowIndices[rowIndex], columnIndex, value);\r\n    return this;\r\n  }\r\n\r\n  get(rowIndex, columnIndex) {\r\n    return this.matrix.get(this.rowIndices[rowIndex], columnIndex);\r\n  }\r\n}\r\n","import { checkIndices } from '../util';\n\nimport BaseView from './base';\n\nexport default class MatrixSelectionView extends BaseView {\n  constructor(matrix, rowIndices, columnIndices) {\n    let indices = checkIndices(matrix, rowIndices, columnIndices);\n    super(matrix, indices.row.length, indices.column.length);\n    this.rowIndices = indices.row;\n    this.columnIndices = indices.column;\n  }\n\n  set(rowIndex, columnIndex, value) {\n    this.matrix.set(\n      this.rowIndices[rowIndex],\n      this.columnIndices[columnIndex],\n      value,\n    );\n    return this;\n  }\n\n  get(rowIndex, columnIndex) {\n    return this.matrix.get(\n      this.rowIndices[rowIndex],\n      this.columnIndices[columnIndex],\n    );\n  }\n}\n","import { checkRange } from '../util';\n\nimport BaseView from './base';\n\nexport default class MatrixSubView extends BaseView {\n  constructor(matrix, startRow, endRow, startColumn, endColumn) {\n    checkRange(matrix, startRow, endRow, startColumn, endColumn);\n    super(matrix, endRow - startRow + 1, endColumn - startColumn + 1);\n    this.startRow = startRow;\n    this.startColumn = startColumn;\n  }\n\n  set(rowIndex, columnIndex, value) {\n    this.matrix.set(\n      this.startRow + rowIndex,\n      this.startColumn + columnIndex,\n      value,\n    );\n    return this;\n  }\n\n  get(rowIndex, columnIndex) {\n    return this.matrix.get(\n      this.startRow + rowIndex,\n      this.startColumn + columnIndex,\n    );\n  }\n}\n","import BaseView from './base';\r\n\r\nexport default class MatrixTransposeView extends BaseView {\r\n  constructor(matrix) {\r\n    super(matrix, matrix.columns, matrix.rows);\r\n  }\r\n\r\n  set(rowIndex, columnIndex, value) {\r\n    this.matrix.set(columnIndex, rowIndex, value);\r\n    return this;\r\n  }\r\n\r\n  get(rowIndex, columnIndex) {\r\n    return this.matrix.get(columnIndex, rowIndex);\r\n  }\r\n}\r\n","export { default as MatrixColumnView } from './column';\nexport { default as MatrixColumnSelectionView } from './columnSelection';\nexport { default as MatrixFlipColumnView } from './flipColumn';\nexport { default as MatrixFlipRowView } from './flipRow';\nexport { default as MatrixRowView } from './row';\nexport { default as MatrixRowSelectionView } from './rowSelection';\nexport { default as MatrixSelectionView } from './selection';\nexport { default as MatrixSubView } from './sub';\nexport { default as MatrixTransposeView } from './transpose';\n","import { AbstractMatrix } from '../matrix';\n\nexport default class WrapperMatrix1D extends AbstractMatrix {\n  constructor(data, options = {}) {\n    const { rows = 1 } = options;\n\n    if (data.length % rows !== 0) {\n      throw new Error('the data length is not divisible by the number of rows');\n    }\n    super();\n    this.rows = rows;\n    this.columns = data.length / rows;\n    this.data = data;\n  }\n\n  set(rowIndex, columnIndex, value) {\n    let index = this._calculateIndex(rowIndex, columnIndex);\n    this.data[index] = value;\n    return this;\n  }\n\n  get(rowIndex, columnIndex) {\n    let index = this._calculateIndex(rowIndex, columnIndex);\n    return this.data[index];\n  }\n\n  _calculateIndex(row, column) {\n    return row * this.columns + column;\n  }\n}\n","import { AbstractMatrix } from '../matrix';\n\nexport default class WrapperMatrix2D extends AbstractMatrix {\n  constructor(data) {\n    super();\n    this.data = data;\n    this.rows = data.length;\n    this.columns = data[0].length;\n  }\n\n  set(rowIndex, columnIndex, value) {\n    this.data[rowIndex][columnIndex] = value;\n    return this;\n  }\n\n  get(rowIndex, columnIndex) {\n    return this.data[rowIndex][columnIndex];\n  }\n}\n","import WrapperMatrix1D from './WrapperMatrix1D';\nimport WrapperMatrix2D from './WrapperMatrix2D';\n\nexport function wrap(array, options) {\n  if (Array.isArray(array)) {\n    if (array[0] && Array.isArray(array[0])) {\n      return new WrapperMatrix2D(array);\n    } else {\n      return new WrapperMatrix1D(array, options);\n    }\n  } else {\n    throw new Error('the argument is not an array');\n  }\n}\n","import Matrix from '../matrix';\nimport WrapperMatrix2D from '../wrap/WrapperMatrix2D';\n\nexport default class LuDecomposition {\n  constructor(matrix) {\n    matrix = WrapperMatrix2D.checkMatrix(matrix);\n\n    let lu = matrix.clone();\n    let rows = lu.rows;\n    let columns = lu.columns;\n    let pivotVector = new Float64Array(rows);\n    let pivotSign = 1;\n    let i, j, k, p, s, t, v;\n    let LUcolj, kmax;\n\n    for (i = 0; i < rows; i++) {\n      pivotVector[i] = i;\n    }\n\n    LUcolj = new Float64Array(rows);\n\n    for (j = 0; j < columns; j++) {\n      for (i = 0; i < rows; i++) {\n        LUcolj[i] = lu.get(i, j);\n      }\n\n      for (i = 0; i < rows; i++) {\n        kmax = Math.min(i, j);\n        s = 0;\n        for (k = 0; k < kmax; k++) {\n          s += lu.get(i, k) * LUcolj[k];\n        }\n        LUcolj[i] -= s;\n        lu.set(i, j, LUcolj[i]);\n      }\n\n      p = j;\n      for (i = j + 1; i < rows; i++) {\n        if (Math.abs(LUcolj[i]) > Math.abs(LUcolj[p])) {\n          p = i;\n        }\n      }\n\n      if (p !== j) {\n        for (k = 0; k < columns; k++) {\n          t = lu.get(p, k);\n          lu.set(p, k, lu.get(j, k));\n          lu.set(j, k, t);\n        }\n\n        v = pivotVector[p];\n        pivotVector[p] = pivotVector[j];\n        pivotVector[j] = v;\n\n        pivotSign = -pivotSign;\n      }\n\n      if (j < rows && lu.get(j, j) !== 0) {\n        for (i = j + 1; i < rows; i++) {\n          lu.set(i, j, lu.get(i, j) / lu.get(j, j));\n        }\n      }\n    }\n\n    this.LU = lu;\n    this.pivotVector = pivotVector;\n    this.pivotSign = pivotSign;\n  }\n\n  isSingular() {\n    let data = this.LU;\n    let col = data.columns;\n    for (let j = 0; j < col; j++) {\n      if (data.get(j, j) === 0) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  solve(value) {\n    value = Matrix.checkMatrix(value);\n\n    let lu = this.LU;\n    let rows = lu.rows;\n\n    if (rows !== value.rows) {\n      throw new Error('Invalid matrix dimensions');\n    }\n    if (this.isSingular()) {\n      throw new Error('LU matrix is singular');\n    }\n\n    let count = value.columns;\n    let X = value.subMatrixRow(this.pivotVector, 0, count - 1);\n    let columns = lu.columns;\n    let i, j, k;\n\n    for (k = 0; k < columns; k++) {\n      for (i = k + 1; i < columns; i++) {\n        for (j = 0; j < count; j++) {\n          X.set(i, j, X.get(i, j) - X.get(k, j) * lu.get(i, k));\n        }\n      }\n    }\n    for (k = columns - 1; k >= 0; k--) {\n      for (j = 0; j < count; j++) {\n        X.set(k, j, X.get(k, j) / lu.get(k, k));\n      }\n      for (i = 0; i < k; i++) {\n        for (j = 0; j < count; j++) {\n          X.set(i, j, X.get(i, j) - X.get(k, j) * lu.get(i, k));\n        }\n      }\n    }\n    return X;\n  }\n\n  get determinant() {\n    let data = this.LU;\n    if (!data.isSquare()) {\n      throw new Error('Matrix must be square');\n    }\n    let determinant = this.pivotSign;\n    let col = data.columns;\n    for (let j = 0; j < col; j++) {\n      determinant *= data.get(j, j);\n    }\n    return determinant;\n  }\n\n  get lowerTriangularMatrix() {\n    let data = this.LU;\n    let rows = data.rows;\n    let columns = data.columns;\n    let X = new Matrix(rows, columns);\n    for (let i = 0; i < rows; i++) {\n      for (let j = 0; j < columns; j++) {\n        if (i > j) {\n          X.set(i, j, data.get(i, j));\n        } else if (i === j) {\n          X.set(i, j, 1);\n        } else {\n          X.set(i, j, 0);\n        }\n      }\n    }\n    return X;\n  }\n\n  get upperTriangularMatrix() {\n    let data = this.LU;\n    let rows = data.rows;\n    let columns = data.columns;\n    let X = new Matrix(rows, columns);\n    for (let i = 0; i < rows; i++) {\n      for (let j = 0; j < columns; j++) {\n        if (i <= j) {\n          X.set(i, j, data.get(i, j));\n        } else {\n          X.set(i, j, 0);\n        }\n      }\n    }\n    return X;\n  }\n\n  get pivotPermutationVector() {\n    return Array.from(this.pivotVector);\n  }\n}\n","export function hypotenuse(a, b) {\n  let r = 0;\n  if (Math.abs(a) > Math.abs(b)) {\n    r = b / a;\n    return Math.abs(a) * Math.sqrt(1 + r * r);\n  }\n  if (b !== 0) {\n    r = a / b;\n    return Math.abs(b) * Math.sqrt(1 + r * r);\n  }\n  return 0;\n}\n","import Matrix from '../matrix';\nimport WrapperMatrix2D from '../wrap/WrapperMatrix2D';\n\nimport { hypotenuse } from './util';\n\nexport default class QrDecomposition {\n  constructor(value) {\n    value = WrapperMatrix2D.checkMatrix(value);\n\n    let qr = value.clone();\n    let m = value.rows;\n    let n = value.columns;\n    let rdiag = new Float64Array(n);\n    let i, j, k, s;\n\n    for (k = 0; k < n; k++) {\n      let nrm = 0;\n      for (i = k; i < m; i++) {\n        nrm = hypotenuse(nrm, qr.get(i, k));\n      }\n      if (nrm !== 0) {\n        if (qr.get(k, k) < 0) {\n          nrm = -nrm;\n        }\n        for (i = k; i < m; i++) {\n          qr.set(i, k, qr.get(i, k) / nrm);\n        }\n        qr.set(k, k, qr.get(k, k) + 1);\n        for (j = k + 1; j < n; j++) {\n          s = 0;\n          for (i = k; i < m; i++) {\n            s += qr.get(i, k) * qr.get(i, j);\n          }\n          s = -s / qr.get(k, k);\n          for (i = k; i < m; i++) {\n            qr.set(i, j, qr.get(i, j) + s * qr.get(i, k));\n          }\n        }\n      }\n      rdiag[k] = -nrm;\n    }\n\n    this.QR = qr;\n    this.Rdiag = rdiag;\n  }\n\n  solve(value) {\n    value = Matrix.checkMatrix(value);\n\n    let qr = this.QR;\n    let m = qr.rows;\n\n    if (value.rows !== m) {\n      throw new Error('Matrix row dimensions must agree');\n    }\n    if (!this.isFullRank()) {\n      throw new Error('Matrix is rank deficient');\n    }\n\n    let count = value.columns;\n    let X = value.clone();\n    let n = qr.columns;\n    let i, j, k, s;\n\n    for (k = 0; k < n; k++) {\n      for (j = 0; j < count; j++) {\n        s = 0;\n        for (i = k; i < m; i++) {\n          s += qr.get(i, k) * X.get(i, j);\n        }\n        s = -s / qr.get(k, k);\n        for (i = k; i < m; i++) {\n          X.set(i, j, X.get(i, j) + s * qr.get(i, k));\n        }\n      }\n    }\n    for (k = n - 1; k >= 0; k--) {\n      for (j = 0; j < count; j++) {\n        X.set(k, j, X.get(k, j) / this.Rdiag[k]);\n      }\n      for (i = 0; i < k; i++) {\n        for (j = 0; j < count; j++) {\n          X.set(i, j, X.get(i, j) - X.get(k, j) * qr.get(i, k));\n        }\n      }\n    }\n\n    return X.subMatrix(0, n - 1, 0, count - 1);\n  }\n\n  isFullRank() {\n    let columns = this.QR.columns;\n    for (let i = 0; i < columns; i++) {\n      if (this.Rdiag[i] === 0) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  get upperTriangularMatrix() {\n    let qr = this.QR;\n    let n = qr.columns;\n    let X = new Matrix(n, n);\n    let i, j;\n    for (i = 0; i < n; i++) {\n      for (j = 0; j < n; j++) {\n        if (i < j) {\n          X.set(i, j, qr.get(i, j));\n        } else if (i === j) {\n          X.set(i, j, this.Rdiag[i]);\n        } else {\n          X.set(i, j, 0);\n        }\n      }\n    }\n    return X;\n  }\n\n  get orthogonalMatrix() {\n    let qr = this.QR;\n    let rows = qr.rows;\n    let columns = qr.columns;\n    let X = new Matrix(rows, columns);\n    let i, j, k, s;\n\n    for (k = columns - 1; k >= 0; k--) {\n      for (i = 0; i < rows; i++) {\n        X.set(i, k, 0);\n      }\n      X.set(k, k, 1);\n      for (j = k; j < columns; j++) {\n        if (qr.get(k, k) !== 0) {\n          s = 0;\n          for (i = k; i < rows; i++) {\n            s += qr.get(i, k) * X.get(i, j);\n          }\n\n          s = -s / qr.get(k, k);\n\n          for (i = k; i < rows; i++) {\n            X.set(i, j, X.get(i, j) + s * qr.get(i, k));\n          }\n        }\n      }\n    }\n    return X;\n  }\n}\n","import Matrix from '../matrix';\nimport WrapperMatrix2D from '../wrap/WrapperMatrix2D';\n\nimport { hypotenuse } from './util';\n\nexport default class SingularValueDecomposition {\n  constructor(value, options = {}) {\n    value = WrapperMatrix2D.checkMatrix(value);\n\n    let m = value.rows;\n    let n = value.columns;\n\n    const {\n      computeLeftSingularVectors = true,\n      computeRightSingularVectors = true,\n      autoTranspose = false,\n    } = options;\n\n    let wantu = Boolean(computeLeftSingularVectors);\n    let wantv = Boolean(computeRightSingularVectors);\n\n    let swapped = false;\n    let a;\n    if (m < n) {\n      if (!autoTranspose) {\n        a = value.clone();\n        // eslint-disable-next-line no-console\n        console.warn(\n          'Computing SVD on a matrix with more columns than rows. Consider enabling autoTranspose',\n        );\n      } else {\n        a = value.transpose();\n        m = a.rows;\n        n = a.columns;\n        swapped = true;\n        let aux = wantu;\n        wantu = wantv;\n        wantv = aux;\n      }\n    } else {\n      a = value.clone();\n    }\n\n    let nu = Math.min(m, n);\n    let ni = Math.min(m + 1, n);\n    let s = new Float64Array(ni);\n    let U = new Matrix(m, nu);\n    let V = new Matrix(n, n);\n\n    let e = new Float64Array(n);\n    let work = new Float64Array(m);\n\n    let si = new Float64Array(ni);\n    for (let i = 0; i < ni; i++) si[i] = i;\n\n    let nct = Math.min(m - 1, n);\n    let nrt = Math.max(0, Math.min(n - 2, m));\n    let mrc = Math.max(nct, nrt);\n\n    for (let k = 0; k < mrc; k++) {\n      if (k < nct) {\n        s[k] = 0;\n        for (let i = k; i < m; i++) {\n          s[k] = hypotenuse(s[k], a.get(i, k));\n        }\n        if (s[k] !== 0) {\n          if (a.get(k, k) < 0) {\n            s[k] = -s[k];\n          }\n          for (let i = k; i < m; i++) {\n            a.set(i, k, a.get(i, k) / s[k]);\n          }\n          a.set(k, k, a.get(k, k) + 1);\n        }\n        s[k] = -s[k];\n      }\n\n      for (let j = k + 1; j < n; j++) {\n        if (k < nct && s[k] !== 0) {\n          let t = 0;\n          for (let i = k; i < m; i++) {\n            t += a.get(i, k) * a.get(i, j);\n          }\n          t = -t / a.get(k, k);\n          for (let i = k; i < m; i++) {\n            a.set(i, j, a.get(i, j) + t * a.get(i, k));\n          }\n        }\n        e[j] = a.get(k, j);\n      }\n\n      if (wantu && k < nct) {\n        for (let i = k; i < m; i++) {\n          U.set(i, k, a.get(i, k));\n        }\n      }\n\n      if (k < nrt) {\n        e[k] = 0;\n        for (let i = k + 1; i < n; i++) {\n          e[k] = hypotenuse(e[k], e[i]);\n        }\n        if (e[k] !== 0) {\n          if (e[k + 1] < 0) {\n            e[k] = 0 - e[k];\n          }\n          for (let i = k + 1; i < n; i++) {\n            e[i] /= e[k];\n          }\n          e[k + 1] += 1;\n        }\n        e[k] = -e[k];\n        if (k + 1 < m && e[k] !== 0) {\n          for (let i = k + 1; i < m; i++) {\n            work[i] = 0;\n          }\n          for (let i = k + 1; i < m; i++) {\n            for (let j = k + 1; j < n; j++) {\n              work[i] += e[j] * a.get(i, j);\n            }\n          }\n          for (let j = k + 1; j < n; j++) {\n            let t = -e[j] / e[k + 1];\n            for (let i = k + 1; i < m; i++) {\n              a.set(i, j, a.get(i, j) + t * work[i]);\n            }\n          }\n        }\n        if (wantv) {\n          for (let i = k + 1; i < n; i++) {\n            V.set(i, k, e[i]);\n          }\n        }\n      }\n    }\n\n    let p = Math.min(n, m + 1);\n    if (nct < n) {\n      s[nct] = a.get(nct, nct);\n    }\n    if (m < p) {\n      s[p - 1] = 0;\n    }\n    if (nrt + 1 < p) {\n      e[nrt] = a.get(nrt, p - 1);\n    }\n    e[p - 1] = 0;\n\n    if (wantu) {\n      for (let j = nct; j < nu; j++) {\n        for (let i = 0; i < m; i++) {\n          U.set(i, j, 0);\n        }\n        U.set(j, j, 1);\n      }\n      for (let k = nct - 1; k >= 0; k--) {\n        if (s[k] !== 0) {\n          for (let j = k + 1; j < nu; j++) {\n            let t = 0;\n            for (let i = k; i < m; i++) {\n              t += U.get(i, k) * U.get(i, j);\n            }\n            t = -t / U.get(k, k);\n            for (let i = k; i < m; i++) {\n              U.set(i, j, U.get(i, j) + t * U.get(i, k));\n            }\n          }\n          for (let i = k; i < m; i++) {\n            U.set(i, k, -U.get(i, k));\n          }\n          U.set(k, k, 1 + U.get(k, k));\n          for (let i = 0; i < k - 1; i++) {\n            U.set(i, k, 0);\n          }\n        } else {\n          for (let i = 0; i < m; i++) {\n            U.set(i, k, 0);\n          }\n          U.set(k, k, 1);\n        }\n      }\n    }\n\n    if (wantv) {\n      for (let k = n - 1; k >= 0; k--) {\n        if (k < nrt && e[k] !== 0) {\n          for (let j = k + 1; j < n; j++) {\n            let t = 0;\n            for (let i = k + 1; i < n; i++) {\n              t += V.get(i, k) * V.get(i, j);\n            }\n            t = -t / V.get(k + 1, k);\n            for (let i = k + 1; i < n; i++) {\n              V.set(i, j, V.get(i, j) + t * V.get(i, k));\n            }\n          }\n        }\n        for (let i = 0; i < n; i++) {\n          V.set(i, k, 0);\n        }\n        V.set(k, k, 1);\n      }\n    }\n\n    let pp = p - 1;\n    let iter = 0;\n    let eps = Number.EPSILON;\n    while (p > 0) {\n      let k, kase;\n      for (k = p - 2; k >= -1; k--) {\n        if (k === -1) {\n          break;\n        }\n        const alpha =\n          Number.MIN_VALUE + eps * Math.abs(s[k] + Math.abs(s[k + 1]));\n        if (Math.abs(e[k]) <= alpha || Number.isNaN(e[k])) {\n          e[k] = 0;\n          break;\n        }\n      }\n      if (k === p - 2) {\n        kase = 4;\n      } else {\n        let ks;\n        for (ks = p - 1; ks >= k; ks--) {\n          if (ks === k) {\n            break;\n          }\n          let t =\n            (ks !== p ? Math.abs(e[ks]) : 0) +\n            (ks !== k + 1 ? Math.abs(e[ks - 1]) : 0);\n          if (Math.abs(s[ks]) <= eps * t) {\n            s[ks] = 0;\n            break;\n          }\n        }\n        if (ks === k) {\n          kase = 3;\n        } else if (ks === p - 1) {\n          kase = 1;\n        } else {\n          kase = 2;\n          k = ks;\n        }\n      }\n\n      k++;\n\n      switch (kase) {\n        case 1: {\n          let f = e[p - 2];\n          e[p - 2] = 0;\n          for (let j = p - 2; j >= k; j--) {\n            let t = hypotenuse(s[j], f);\n            let cs = s[j] / t;\n            let sn = f / t;\n            s[j] = t;\n            if (j !== k) {\n              f = -sn * e[j - 1];\n              e[j - 1] = cs * e[j - 1];\n            }\n            if (wantv) {\n              for (let i = 0; i < n; i++) {\n                t = cs * V.get(i, j) + sn * V.get(i, p - 1);\n                V.set(i, p - 1, -sn * V.get(i, j) + cs * V.get(i, p - 1));\n                V.set(i, j, t);\n              }\n            }\n          }\n          break;\n        }\n        case 2: {\n          let f = e[k - 1];\n          e[k - 1] = 0;\n          for (let j = k; j < p; j++) {\n            let t = hypotenuse(s[j], f);\n            let cs = s[j] / t;\n            let sn = f / t;\n            s[j] = t;\n            f = -sn * e[j];\n            e[j] = cs * e[j];\n            if (wantu) {\n              for (let i = 0; i < m; i++) {\n                t = cs * U.get(i, j) + sn * U.get(i, k - 1);\n                U.set(i, k - 1, -sn * U.get(i, j) + cs * U.get(i, k - 1));\n                U.set(i, j, t);\n              }\n            }\n          }\n          break;\n        }\n        case 3: {\n          const scale = Math.max(\n            Math.abs(s[p - 1]),\n            Math.abs(s[p - 2]),\n            Math.abs(e[p - 2]),\n            Math.abs(s[k]),\n            Math.abs(e[k]),\n          );\n          const sp = s[p - 1] / scale;\n          const spm1 = s[p - 2] / scale;\n          const epm1 = e[p - 2] / scale;\n          const sk = s[k] / scale;\n          const ek = e[k] / scale;\n          const b = ((spm1 + sp) * (spm1 - sp) + epm1 * epm1) / 2;\n          const c = sp * epm1 * (sp * epm1);\n          let shift = 0;\n          if (b !== 0 || c !== 0) {\n            if (b < 0) {\n              shift = 0 - Math.sqrt(b * b + c);\n            } else {\n              shift = Math.sqrt(b * b + c);\n            }\n            shift = c / (b + shift);\n          }\n          let f = (sk + sp) * (sk - sp) + shift;\n          let g = sk * ek;\n          for (let j = k; j < p - 1; j++) {\n            let t = hypotenuse(f, g);\n            if (t === 0) t = Number.MIN_VALUE;\n            let cs = f / t;\n            let sn = g / t;\n            if (j !== k) {\n              e[j - 1] = t;\n            }\n            f = cs * s[j] + sn * e[j];\n            e[j] = cs * e[j] - sn * s[j];\n            g = sn * s[j + 1];\n            s[j + 1] = cs * s[j + 1];\n            if (wantv) {\n              for (let i = 0; i < n; i++) {\n                t = cs * V.get(i, j) + sn * V.get(i, j + 1);\n                V.set(i, j + 1, -sn * V.get(i, j) + cs * V.get(i, j + 1));\n                V.set(i, j, t);\n              }\n            }\n            t = hypotenuse(f, g);\n            if (t === 0) t = Number.MIN_VALUE;\n            cs = f / t;\n            sn = g / t;\n            s[j] = t;\n            f = cs * e[j] + sn * s[j + 1];\n            s[j + 1] = -sn * e[j] + cs * s[j + 1];\n            g = sn * e[j + 1];\n            e[j + 1] = cs * e[j + 1];\n            if (wantu && j < m - 1) {\n              for (let i = 0; i < m; i++) {\n                t = cs * U.get(i, j) + sn * U.get(i, j + 1);\n                U.set(i, j + 1, -sn * U.get(i, j) + cs * U.get(i, j + 1));\n                U.set(i, j, t);\n              }\n            }\n          }\n          e[p - 2] = f;\n          iter = iter + 1;\n          break;\n        }\n        case 4: {\n          if (s[k] <= 0) {\n            s[k] = s[k] < 0 ? -s[k] : 0;\n            if (wantv) {\n              for (let i = 0; i <= pp; i++) {\n                V.set(i, k, -V.get(i, k));\n              }\n            }\n          }\n          while (k < pp) {\n            if (s[k] >= s[k + 1]) {\n              break;\n            }\n            let t = s[k];\n            s[k] = s[k + 1];\n            s[k + 1] = t;\n            if (wantv && k < n - 1) {\n              for (let i = 0; i < n; i++) {\n                t = V.get(i, k + 1);\n                V.set(i, k + 1, V.get(i, k));\n                V.set(i, k, t);\n              }\n            }\n            if (wantu && k < m - 1) {\n              for (let i = 0; i < m; i++) {\n                t = U.get(i, k + 1);\n                U.set(i, k + 1, U.get(i, k));\n                U.set(i, k, t);\n              }\n            }\n            k++;\n          }\n          iter = 0;\n          p--;\n          break;\n        }\n        // no default\n      }\n    }\n\n    if (swapped) {\n      let tmp = V;\n      V = U;\n      U = tmp;\n    }\n\n    this.m = m;\n    this.n = n;\n    this.s = s;\n    this.U = U;\n    this.V = V;\n  }\n\n  solve(value) {\n    let Y = value;\n    let e = this.threshold;\n    let scols = this.s.length;\n    let Ls = Matrix.zeros(scols, scols);\n\n    for (let i = 0; i < scols; i++) {\n      if (Math.abs(this.s[i]) <= e) {\n        Ls.set(i, i, 0);\n      } else {\n        Ls.set(i, i, 1 / this.s[i]);\n      }\n    }\n\n    let U = this.U;\n    let V = this.rightSingularVectors;\n\n    let VL = V.mmul(Ls);\n    let vrows = V.rows;\n    let urows = U.rows;\n    let VLU = Matrix.zeros(vrows, urows);\n\n    for (let i = 0; i < vrows; i++) {\n      for (let j = 0; j < urows; j++) {\n        let sum = 0;\n        for (let k = 0; k < scols; k++) {\n          sum += VL.get(i, k) * U.get(j, k);\n        }\n        VLU.set(i, j, sum);\n      }\n    }\n\n    return VLU.mmul(Y);\n  }\n\n  solveForDiagonal(value) {\n    return this.solve(Matrix.diag(value));\n  }\n\n  inverse() {\n    let V = this.V;\n    let e = this.threshold;\n    let vrows = V.rows;\n    let vcols = V.columns;\n    let X = new Matrix(vrows, this.s.length);\n\n    for (let i = 0; i < vrows; i++) {\n      for (let j = 0; j < vcols; j++) {\n        if (Math.abs(this.s[j]) > e) {\n          X.set(i, j, V.get(i, j) / this.s[j]);\n        }\n      }\n    }\n\n    let U = this.U;\n\n    let urows = U.rows;\n    let ucols = U.columns;\n    let Y = new Matrix(vrows, urows);\n\n    for (let i = 0; i < vrows; i++) {\n      for (let j = 0; j < urows; j++) {\n        let sum = 0;\n        for (let k = 0; k < ucols; k++) {\n          sum += X.get(i, k) * U.get(j, k);\n        }\n        Y.set(i, j, sum);\n      }\n    }\n\n    return Y;\n  }\n\n  get condition() {\n    return this.s[0] / this.s[Math.min(this.m, this.n) - 1];\n  }\n\n  get norm2() {\n    return this.s[0];\n  }\n\n  get rank() {\n    let tol = Math.max(this.m, this.n) * this.s[0] * Number.EPSILON;\n    let r = 0;\n    let s = this.s;\n    for (let i = 0, ii = s.length; i < ii; i++) {\n      if (s[i] > tol) {\n        r++;\n      }\n    }\n    return r;\n  }\n\n  get diagonal() {\n    return Array.from(this.s);\n  }\n\n  get threshold() {\n    return (Number.EPSILON / 2) * Math.max(this.m, this.n) * this.s[0];\n  }\n\n  get leftSingularVectors() {\n    return this.U;\n  }\n\n  get rightSingularVectors() {\n    return this.V;\n  }\n\n  get diagonalMatrix() {\n    return Matrix.diag(this.s);\n  }\n}\n","import LuDecomposition from './dc/lu';\nimport QrDecomposition from './dc/qr';\nimport SingularValueDecomposition from './dc/svd';\nimport Matrix from './matrix';\nimport WrapperMatrix2D from './wrap/WrapperMatrix2D';\n\nexport function inverse(matrix, useSVD = false) {\n  matrix = WrapperMatrix2D.checkMatrix(matrix);\n  if (useSVD) {\n    return new SingularValueDecomposition(matrix).inverse();\n  } else {\n    return solve(matrix, Matrix.eye(matrix.rows));\n  }\n}\n\nexport function solve(leftHandSide, rightHandSide, useSVD = false) {\n  leftHandSide = WrapperMatrix2D.checkMatrix(leftHandSide);\n  rightHandSide = WrapperMatrix2D.checkMatrix(rightHandSide);\n  if (useSVD) {\n    return new SingularValueDecomposition(leftHandSide).solve(rightHandSide);\n  } else {\n    return leftHandSide.isSquare()\n      ? new LuDecomposition(leftHandSide).solve(rightHandSide)\n      : new QrDecomposition(leftHandSide).solve(rightHandSide);\n  }\n}\n","import Matrix from './matrix';\nimport LuDecomposition from './dc/lu';\nimport MatrixSelectionView from './views/selection';\n\nexport function determinant(matrix) {\n  matrix = Matrix.checkMatrix(matrix);\n  if (matrix.isSquare()) {\n    let a, b, c, d;\n    if (matrix.columns === 2) {\n      // 2 x 2 matrix\n      a = matrix.get(0, 0);\n      b = matrix.get(0, 1);\n      c = matrix.get(1, 0);\n      d = matrix.get(1, 1);\n\n      return a * d - b * c;\n    } else if (matrix.columns === 3) {\n      // 3 x 3 matrix\n      let subMatrix0, subMatrix1, subMatrix2;\n      subMatrix0 = new MatrixSelectionView(matrix, [1, 2], [1, 2]);\n      subMatrix1 = new MatrixSelectionView(matrix, [1, 2], [0, 2]);\n      subMatrix2 = new MatrixSelectionView(matrix, [1, 2], [0, 1]);\n      a = matrix.get(0, 0);\n      b = matrix.get(0, 1);\n      c = matrix.get(0, 2);\n\n      return (\n        a * determinant(subMatrix0) -\n        b * determinant(subMatrix1) +\n        c * determinant(subMatrix2)\n      );\n    } else {\n      // general purpose determinant using the LU decomposition\n      return new LuDecomposition(matrix).determinant;\n    }\n  } else {\n    throw Error('determinant can only be calculated for a square matrix');\n  }\n}\n","import Matrix from './matrix';\nimport SingularValueDecomposition from './dc/svd';\n\nfunction xrange(n, exception) {\n  let range = [];\n  for (let i = 0; i < n; i++) {\n    if (i !== exception) {\n      range.push(i);\n    }\n  }\n  return range;\n}\n\nfunction dependenciesOneRow(\n  error,\n  matrix,\n  index,\n  thresholdValue = 10e-10,\n  thresholdError = 10e-10,\n) {\n  if (error > thresholdError) {\n    return new Array(matrix.rows + 1).fill(0);\n  } else {\n    let returnArray = matrix.addRow(index, [0]);\n    for (let i = 0; i < returnArray.rows; i++) {\n      if (Math.abs(returnArray.get(i, 0)) < thresholdValue) {\n        returnArray.set(i, 0, 0);\n      }\n    }\n    return returnArray.to1DArray();\n  }\n}\n\nexport function linearDependencies(matrix, options = {}) {\n  const { thresholdValue = 10e-10, thresholdError = 10e-10 } = options;\n  matrix = Matrix.checkMatrix(matrix);\n\n  let n = matrix.rows;\n  let results = new Matrix(n, n);\n\n  for (let i = 0; i < n; i++) {\n    let b = Matrix.columnVector(matrix.getRow(i));\n    let Abis = matrix.subMatrixRow(xrange(n, i)).transpose();\n    let svd = new SingularValueDecomposition(Abis);\n    let x = svd.solve(b);\n    let error = Matrix.sub(b, Abis.mmul(x))\n      .abs()\n      .max();\n    results.setRow(\n      i,\n      dependenciesOneRow(error, x, i, thresholdValue, thresholdError),\n    );\n  }\n  return results;\n}\n","import SVD from './dc/svd';\nimport Matrix from './matrix';\n\nexport function pseudoInverse(matrix, threshold = Number.EPSILON) {\n  matrix = Matrix.checkMatrix(matrix);\n  let svdSolution = new SVD(matrix, { autoTranspose: true });\n\n  let U = svdSolution.leftSingularVectors;\n  let V = svdSolution.rightSingularVectors;\n  let s = svdSolution.diagonal;\n\n  for (let i = 0; i < s.length; i++) {\n    if (Math.abs(s[i]) > threshold) {\n      s[i] = 1.0 / s[i];\n    } else {\n      s[i] = 0.0;\n    }\n  }\n\n  return V.mmul(Matrix.diag(s).mmul(U.transpose()));\n}\n","import Matrix from './matrix';\n\nexport function covariance(xMatrix, yMatrix = xMatrix, options = {}) {\n  xMatrix = Matrix.checkMatrix(xMatrix);\n  let yIsSame = false;\n  if (\n    typeof yMatrix === 'object' &&\n    !Matrix.isMatrix(yMatrix) &&\n    !Array.isArray(yMatrix)\n  ) {\n    options = yMatrix;\n    yMatrix = xMatrix;\n    yIsSame = true;\n  } else {\n    yMatrix = Matrix.checkMatrix(yMatrix);\n  }\n  if (xMatrix.rows !== yMatrix.rows) {\n    throw new TypeError('Both matrices must have the same number of rows');\n  }\n  const { center = true } = options;\n  if (center) {\n    xMatrix = xMatrix.center('column');\n    if (!yIsSame) {\n      yMatrix = yMatrix.center('column');\n    }\n  }\n  const cov = xMatrix.transpose().mmul(yMatrix);\n  for (let i = 0; i < cov.rows; i++) {\n    for (let j = 0; j < cov.columns; j++) {\n      cov.set(i, j, cov.get(i, j) * (1 / (xMatrix.rows - 1)));\n    }\n  }\n  return cov;\n}\n","import Matrix from './matrix';\n\nexport function correlation(xMatrix, yMatrix = xMatrix, options = {}) {\n  xMatrix = Matrix.checkMatrix(xMatrix);\n  let yIsSame = false;\n  if (\n    typeof yMatrix === 'object' &&\n    !Matrix.isMatrix(yMatrix) &&\n    !Array.isArray(yMatrix)\n  ) {\n    options = yMatrix;\n    yMatrix = xMatrix;\n    yIsSame = true;\n  } else {\n    yMatrix = Matrix.checkMatrix(yMatrix);\n  }\n  if (xMatrix.rows !== yMatrix.rows) {\n    throw new TypeError('Both matrices must have the same number of rows');\n  }\n\n  const { center = true, scale = true } = options;\n  if (center) {\n    xMatrix.center('column');\n    if (!yIsSame) {\n      yMatrix.center('column');\n    }\n  }\n  if (scale) {\n    xMatrix.scale('column');\n    if (!yIsSame) {\n      yMatrix.scale('column');\n    }\n  }\n\n  const sdx = xMatrix.standardDeviation('column', { unbiased: true });\n  const sdy = yIsSame\n    ? sdx\n    : yMatrix.standardDeviation('column', { unbiased: true });\n\n  const corr = xMatrix.transpose().mmul(yMatrix);\n  for (let i = 0; i < corr.rows; i++) {\n    for (let j = 0; j < corr.columns; j++) {\n      corr.set(\n        i,\n        j,\n        corr.get(i, j) * (1 / (sdx[i] * sdy[j])) * (1 / (xMatrix.rows - 1)),\n      );\n    }\n  }\n  return corr;\n}\n","import Matrix from '../matrix';\nimport WrapperMatrix2D from '../wrap/WrapperMatrix2D';\n\nimport { hypotenuse } from './util';\n\nexport default class EigenvalueDecomposition {\n  constructor(matrix, options = {}) {\n    const { assumeSymmetric = false } = options;\n\n    matrix = WrapperMatrix2D.checkMatrix(matrix);\n    if (!matrix.isSquare()) {\n      throw new Error('Matrix is not a square matrix');\n    }\n\n    let n = matrix.columns;\n    let V = new Matrix(n, n);\n    let d = new Float64Array(n);\n    let e = new Float64Array(n);\n    let value = matrix;\n    let i, j;\n\n    let isSymmetric = false;\n    if (assumeSymmetric) {\n      isSymmetric = true;\n    } else {\n      isSymmetric = matrix.isSymmetric();\n    }\n\n    if (isSymmetric) {\n      for (i = 0; i < n; i++) {\n        for (j = 0; j < n; j++) {\n          V.set(i, j, value.get(i, j));\n        }\n      }\n      tred2(n, e, d, V);\n      tql2(n, e, d, V);\n    } else {\n      let H = new Matrix(n, n);\n      let ort = new Float64Array(n);\n      for (j = 0; j < n; j++) {\n        for (i = 0; i < n; i++) {\n          H.set(i, j, value.get(i, j));\n        }\n      }\n      orthes(n, H, ort, V);\n      hqr2(n, e, d, V, H);\n    }\n\n    this.n = n;\n    this.e = e;\n    this.d = d;\n    this.V = V;\n  }\n\n  get realEigenvalues() {\n    return Array.from(this.d);\n  }\n\n  get imaginaryEigenvalues() {\n    return Array.from(this.e);\n  }\n\n  get eigenvectorMatrix() {\n    return this.V;\n  }\n\n  get diagonalMatrix() {\n    let n = this.n;\n    let e = this.e;\n    let d = this.d;\n    let X = new Matrix(n, n);\n    let i, j;\n    for (i = 0; i < n; i++) {\n      for (j = 0; j < n; j++) {\n        X.set(i, j, 0);\n      }\n      X.set(i, i, d[i]);\n      if (e[i] > 0) {\n        X.set(i, i + 1, e[i]);\n      } else if (e[i] < 0) {\n        X.set(i, i - 1, e[i]);\n      }\n    }\n    return X;\n  }\n}\n\nfunction tred2(n, e, d, V) {\n  let f, g, h, i, j, k, hh, scale;\n\n  for (j = 0; j < n; j++) {\n    d[j] = V.get(n - 1, j);\n  }\n\n  for (i = n - 1; i > 0; i--) {\n    scale = 0;\n    h = 0;\n    for (k = 0; k < i; k++) {\n      scale = scale + Math.abs(d[k]);\n    }\n\n    if (scale === 0) {\n      e[i] = d[i - 1];\n      for (j = 0; j < i; j++) {\n        d[j] = V.get(i - 1, j);\n        V.set(i, j, 0);\n        V.set(j, i, 0);\n      }\n    } else {\n      for (k = 0; k < i; k++) {\n        d[k] /= scale;\n        h += d[k] * d[k];\n      }\n\n      f = d[i - 1];\n      g = Math.sqrt(h);\n      if (f > 0) {\n        g = -g;\n      }\n\n      e[i] = scale * g;\n      h = h - f * g;\n      d[i - 1] = f - g;\n      for (j = 0; j < i; j++) {\n        e[j] = 0;\n      }\n\n      for (j = 0; j < i; j++) {\n        f = d[j];\n        V.set(j, i, f);\n        g = e[j] + V.get(j, j) * f;\n        for (k = j + 1; k <= i - 1; k++) {\n          g += V.get(k, j) * d[k];\n          e[k] += V.get(k, j) * f;\n        }\n        e[j] = g;\n      }\n\n      f = 0;\n      for (j = 0; j < i; j++) {\n        e[j] /= h;\n        f += e[j] * d[j];\n      }\n\n      hh = f / (h + h);\n      for (j = 0; j < i; j++) {\n        e[j] -= hh * d[j];\n      }\n\n      for (j = 0; j < i; j++) {\n        f = d[j];\n        g = e[j];\n        for (k = j; k <= i - 1; k++) {\n          V.set(k, j, V.get(k, j) - (f * e[k] + g * d[k]));\n        }\n        d[j] = V.get(i - 1, j);\n        V.set(i, j, 0);\n      }\n    }\n    d[i] = h;\n  }\n\n  for (i = 0; i < n - 1; i++) {\n    V.set(n - 1, i, V.get(i, i));\n    V.set(i, i, 1);\n    h = d[i + 1];\n    if (h !== 0) {\n      for (k = 0; k <= i; k++) {\n        d[k] = V.get(k, i + 1) / h;\n      }\n\n      for (j = 0; j <= i; j++) {\n        g = 0;\n        for (k = 0; k <= i; k++) {\n          g += V.get(k, i + 1) * V.get(k, j);\n        }\n        for (k = 0; k <= i; k++) {\n          V.set(k, j, V.get(k, j) - g * d[k]);\n        }\n      }\n    }\n\n    for (k = 0; k <= i; k++) {\n      V.set(k, i + 1, 0);\n    }\n  }\n\n  for (j = 0; j < n; j++) {\n    d[j] = V.get(n - 1, j);\n    V.set(n - 1, j, 0);\n  }\n\n  V.set(n - 1, n - 1, 1);\n  e[0] = 0;\n}\n\nfunction tql2(n, e, d, V) {\n  let g, h, i, j, k, l, m, p, r, dl1, c, c2, c3, el1, s, s2, iter;\n\n  for (i = 1; i < n; i++) {\n    e[i - 1] = e[i];\n  }\n\n  e[n - 1] = 0;\n\n  let f = 0;\n  let tst1 = 0;\n  let eps = Number.EPSILON;\n\n  for (l = 0; l < n; l++) {\n    tst1 = Math.max(tst1, Math.abs(d[l]) + Math.abs(e[l]));\n    m = l;\n    while (m < n) {\n      if (Math.abs(e[m]) <= eps * tst1) {\n        break;\n      }\n      m++;\n    }\n\n    if (m > l) {\n      iter = 0;\n      do {\n        iter = iter + 1;\n\n        g = d[l];\n        p = (d[l + 1] - g) / (2 * e[l]);\n        r = hypotenuse(p, 1);\n        if (p < 0) {\n          r = -r;\n        }\n\n        d[l] = e[l] / (p + r);\n        d[l + 1] = e[l] * (p + r);\n        dl1 = d[l + 1];\n        h = g - d[l];\n        for (i = l + 2; i < n; i++) {\n          d[i] -= h;\n        }\n\n        f = f + h;\n\n        p = d[m];\n        c = 1;\n        c2 = c;\n        c3 = c;\n        el1 = e[l + 1];\n        s = 0;\n        s2 = 0;\n        for (i = m - 1; i >= l; i--) {\n          c3 = c2;\n          c2 = c;\n          s2 = s;\n          g = c * e[i];\n          h = c * p;\n          r = hypotenuse(p, e[i]);\n          e[i + 1] = s * r;\n          s = e[i] / r;\n          c = p / r;\n          p = c * d[i] - s * g;\n          d[i + 1] = h + s * (c * g + s * d[i]);\n\n          for (k = 0; k < n; k++) {\n            h = V.get(k, i + 1);\n            V.set(k, i + 1, s * V.get(k, i) + c * h);\n            V.set(k, i, c * V.get(k, i) - s * h);\n          }\n        }\n\n        p = (-s * s2 * c3 * el1 * e[l]) / dl1;\n        e[l] = s * p;\n        d[l] = c * p;\n      } while (Math.abs(e[l]) > eps * tst1);\n    }\n    d[l] = d[l] + f;\n    e[l] = 0;\n  }\n\n  for (i = 0; i < n - 1; i++) {\n    k = i;\n    p = d[i];\n    for (j = i + 1; j < n; j++) {\n      if (d[j] < p) {\n        k = j;\n        p = d[j];\n      }\n    }\n\n    if (k !== i) {\n      d[k] = d[i];\n      d[i] = p;\n      for (j = 0; j < n; j++) {\n        p = V.get(j, i);\n        V.set(j, i, V.get(j, k));\n        V.set(j, k, p);\n      }\n    }\n  }\n}\n\nfunction orthes(n, H, ort, V) {\n  let low = 0;\n  let high = n - 1;\n  let f, g, h, i, j, m;\n  let scale;\n\n  for (m = low + 1; m <= high - 1; m++) {\n    scale = 0;\n    for (i = m; i <= high; i++) {\n      scale = scale + Math.abs(H.get(i, m - 1));\n    }\n\n    if (scale !== 0) {\n      h = 0;\n      for (i = high; i >= m; i--) {\n        ort[i] = H.get(i, m - 1) / scale;\n        h += ort[i] * ort[i];\n      }\n\n      g = Math.sqrt(h);\n      if (ort[m] > 0) {\n        g = -g;\n      }\n\n      h = h - ort[m] * g;\n      ort[m] = ort[m] - g;\n\n      for (j = m; j < n; j++) {\n        f = 0;\n        for (i = high; i >= m; i--) {\n          f += ort[i] * H.get(i, j);\n        }\n\n        f = f / h;\n        for (i = m; i <= high; i++) {\n          H.set(i, j, H.get(i, j) - f * ort[i]);\n        }\n      }\n\n      for (i = 0; i <= high; i++) {\n        f = 0;\n        for (j = high; j >= m; j--) {\n          f += ort[j] * H.get(i, j);\n        }\n\n        f = f / h;\n        for (j = m; j <= high; j++) {\n          H.set(i, j, H.get(i, j) - f * ort[j]);\n        }\n      }\n\n      ort[m] = scale * ort[m];\n      H.set(m, m - 1, scale * g);\n    }\n  }\n\n  for (i = 0; i < n; i++) {\n    for (j = 0; j < n; j++) {\n      V.set(i, j, i === j ? 1 : 0);\n    }\n  }\n\n  for (m = high - 1; m >= low + 1; m--) {\n    if (H.get(m, m - 1) !== 0) {\n      for (i = m + 1; i <= high; i++) {\n        ort[i] = H.get(i, m - 1);\n      }\n\n      for (j = m; j <= high; j++) {\n        g = 0;\n        for (i = m; i <= high; i++) {\n          g += ort[i] * V.get(i, j);\n        }\n\n        g = g / ort[m] / H.get(m, m - 1);\n        for (i = m; i <= high; i++) {\n          V.set(i, j, V.get(i, j) + g * ort[i]);\n        }\n      }\n    }\n  }\n}\n\nfunction hqr2(nn, e, d, V, H) {\n  let n = nn - 1;\n  let low = 0;\n  let high = nn - 1;\n  let eps = Number.EPSILON;\n  let exshift = 0;\n  let norm = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let z = 0;\n  let iter = 0;\n  let i, j, k, l, m, t, w, x, y;\n  let ra, sa, vr, vi;\n  let notlast, cdivres;\n\n  for (i = 0; i < nn; i++) {\n    if (i < low || i > high) {\n      d[i] = H.get(i, i);\n      e[i] = 0;\n    }\n\n    for (j = Math.max(i - 1, 0); j < nn; j++) {\n      norm = norm + Math.abs(H.get(i, j));\n    }\n  }\n\n  while (n >= low) {\n    l = n;\n    while (l > low) {\n      s = Math.abs(H.get(l - 1, l - 1)) + Math.abs(H.get(l, l));\n      if (s === 0) {\n        s = norm;\n      }\n      if (Math.abs(H.get(l, l - 1)) < eps * s) {\n        break;\n      }\n      l--;\n    }\n\n    if (l === n) {\n      H.set(n, n, H.get(n, n) + exshift);\n      d[n] = H.get(n, n);\n      e[n] = 0;\n      n--;\n      iter = 0;\n    } else if (l === n - 1) {\n      w = H.get(n, n - 1) * H.get(n - 1, n);\n      p = (H.get(n - 1, n - 1) - H.get(n, n)) / 2;\n      q = p * p + w;\n      z = Math.sqrt(Math.abs(q));\n      H.set(n, n, H.get(n, n) + exshift);\n      H.set(n - 1, n - 1, H.get(n - 1, n - 1) + exshift);\n      x = H.get(n, n);\n\n      if (q >= 0) {\n        z = p >= 0 ? p + z : p - z;\n        d[n - 1] = x + z;\n        d[n] = d[n - 1];\n        if (z !== 0) {\n          d[n] = x - w / z;\n        }\n        e[n - 1] = 0;\n        e[n] = 0;\n        x = H.get(n, n - 1);\n        s = Math.abs(x) + Math.abs(z);\n        p = x / s;\n        q = z / s;\n        r = Math.sqrt(p * p + q * q);\n        p = p / r;\n        q = q / r;\n\n        for (j = n - 1; j < nn; j++) {\n          z = H.get(n - 1, j);\n          H.set(n - 1, j, q * z + p * H.get(n, j));\n          H.set(n, j, q * H.get(n, j) - p * z);\n        }\n\n        for (i = 0; i <= n; i++) {\n          z = H.get(i, n - 1);\n          H.set(i, n - 1, q * z + p * H.get(i, n));\n          H.set(i, n, q * H.get(i, n) - p * z);\n        }\n\n        for (i = low; i <= high; i++) {\n          z = V.get(i, n - 1);\n          V.set(i, n - 1, q * z + p * V.get(i, n));\n          V.set(i, n, q * V.get(i, n) - p * z);\n        }\n      } else {\n        d[n - 1] = x + p;\n        d[n] = x + p;\n        e[n - 1] = z;\n        e[n] = -z;\n      }\n\n      n = n - 2;\n      iter = 0;\n    } else {\n      x = H.get(n, n);\n      y = 0;\n      w = 0;\n      if (l < n) {\n        y = H.get(n - 1, n - 1);\n        w = H.get(n, n - 1) * H.get(n - 1, n);\n      }\n\n      if (iter === 10) {\n        exshift += x;\n        for (i = low; i <= n; i++) {\n          H.set(i, i, H.get(i, i) - x);\n        }\n        s = Math.abs(H.get(n, n - 1)) + Math.abs(H.get(n - 1, n - 2));\n        x = y = 0.75 * s;\n        w = -0.4375 * s * s;\n      }\n\n      if (iter === 30) {\n        s = (y - x) / 2;\n        s = s * s + w;\n        if (s > 0) {\n          s = Math.sqrt(s);\n          if (y < x) {\n            s = -s;\n          }\n          s = x - w / ((y - x) / 2 + s);\n          for (i = low; i <= n; i++) {\n            H.set(i, i, H.get(i, i) - s);\n          }\n          exshift += s;\n          x = y = w = 0.964;\n        }\n      }\n\n      iter = iter + 1;\n\n      m = n - 2;\n      while (m >= l) {\n        z = H.get(m, m);\n        r = x - z;\n        s = y - z;\n        p = (r * s - w) / H.get(m + 1, m) + H.get(m, m + 1);\n        q = H.get(m + 1, m + 1) - z - r - s;\n        r = H.get(m + 2, m + 1);\n        s = Math.abs(p) + Math.abs(q) + Math.abs(r);\n        p = p / s;\n        q = q / s;\n        r = r / s;\n        if (m === l) {\n          break;\n        }\n        if (\n          Math.abs(H.get(m, m - 1)) * (Math.abs(q) + Math.abs(r)) <\n          eps *\n            (Math.abs(p) *\n              (Math.abs(H.get(m - 1, m - 1)) +\n                Math.abs(z) +\n                Math.abs(H.get(m + 1, m + 1))))\n        ) {\n          break;\n        }\n        m--;\n      }\n\n      for (i = m + 2; i <= n; i++) {\n        H.set(i, i - 2, 0);\n        if (i > m + 2) {\n          H.set(i, i - 3, 0);\n        }\n      }\n\n      for (k = m; k <= n - 1; k++) {\n        notlast = k !== n - 1;\n        if (k !== m) {\n          p = H.get(k, k - 1);\n          q = H.get(k + 1, k - 1);\n          r = notlast ? H.get(k + 2, k - 1) : 0;\n          x = Math.abs(p) + Math.abs(q) + Math.abs(r);\n          if (x !== 0) {\n            p = p / x;\n            q = q / x;\n            r = r / x;\n          }\n        }\n\n        if (x === 0) {\n          break;\n        }\n\n        s = Math.sqrt(p * p + q * q + r * r);\n        if (p < 0) {\n          s = -s;\n        }\n\n        if (s !== 0) {\n          if (k !== m) {\n            H.set(k, k - 1, -s * x);\n          } else if (l !== m) {\n            H.set(k, k - 1, -H.get(k, k - 1));\n          }\n\n          p = p + s;\n          x = p / s;\n          y = q / s;\n          z = r / s;\n          q = q / p;\n          r = r / p;\n\n          for (j = k; j < nn; j++) {\n            p = H.get(k, j) + q * H.get(k + 1, j);\n            if (notlast) {\n              p = p + r * H.get(k + 2, j);\n              H.set(k + 2, j, H.get(k + 2, j) - p * z);\n            }\n\n            H.set(k, j, H.get(k, j) - p * x);\n            H.set(k + 1, j, H.get(k + 1, j) - p * y);\n          }\n\n          for (i = 0; i <= Math.min(n, k + 3); i++) {\n            p = x * H.get(i, k) + y * H.get(i, k + 1);\n            if (notlast) {\n              p = p + z * H.get(i, k + 2);\n              H.set(i, k + 2, H.get(i, k + 2) - p * r);\n            }\n\n            H.set(i, k, H.get(i, k) - p);\n            H.set(i, k + 1, H.get(i, k + 1) - p * q);\n          }\n\n          for (i = low; i <= high; i++) {\n            p = x * V.get(i, k) + y * V.get(i, k + 1);\n            if (notlast) {\n              p = p + z * V.get(i, k + 2);\n              V.set(i, k + 2, V.get(i, k + 2) - p * r);\n            }\n\n            V.set(i, k, V.get(i, k) - p);\n            V.set(i, k + 1, V.get(i, k + 1) - p * q);\n          }\n        }\n      }\n    }\n  }\n\n  if (norm === 0) {\n    return;\n  }\n\n  for (n = nn - 1; n >= 0; n--) {\n    p = d[n];\n    q = e[n];\n\n    if (q === 0) {\n      l = n;\n      H.set(n, n, 1);\n      for (i = n - 1; i >= 0; i--) {\n        w = H.get(i, i) - p;\n        r = 0;\n        for (j = l; j <= n; j++) {\n          r = r + H.get(i, j) * H.get(j, n);\n        }\n\n        if (e[i] < 0) {\n          z = w;\n          s = r;\n        } else {\n          l = i;\n          if (e[i] === 0) {\n            H.set(i, n, w !== 0 ? -r / w : -r / (eps * norm));\n          } else {\n            x = H.get(i, i + 1);\n            y = H.get(i + 1, i);\n            q = (d[i] - p) * (d[i] - p) + e[i] * e[i];\n            t = (x * s - z * r) / q;\n            H.set(i, n, t);\n            H.set(\n              i + 1,\n              n,\n              Math.abs(x) > Math.abs(z) ? (-r - w * t) / x : (-s - y * t) / z,\n            );\n          }\n\n          t = Math.abs(H.get(i, n));\n          if (eps * t * t > 1) {\n            for (j = i; j <= n; j++) {\n              H.set(j, n, H.get(j, n) / t);\n            }\n          }\n        }\n      }\n    } else if (q < 0) {\n      l = n - 1;\n\n      if (Math.abs(H.get(n, n - 1)) > Math.abs(H.get(n - 1, n))) {\n        H.set(n - 1, n - 1, q / H.get(n, n - 1));\n        H.set(n - 1, n, -(H.get(n, n) - p) / H.get(n, n - 1));\n      } else {\n        cdivres = cdiv(0, -H.get(n - 1, n), H.get(n - 1, n - 1) - p, q);\n        H.set(n - 1, n - 1, cdivres[0]);\n        H.set(n - 1, n, cdivres[1]);\n      }\n\n      H.set(n, n - 1, 0);\n      H.set(n, n, 1);\n      for (i = n - 2; i >= 0; i--) {\n        ra = 0;\n        sa = 0;\n        for (j = l; j <= n; j++) {\n          ra = ra + H.get(i, j) * H.get(j, n - 1);\n          sa = sa + H.get(i, j) * H.get(j, n);\n        }\n\n        w = H.get(i, i) - p;\n\n        if (e[i] < 0) {\n          z = w;\n          r = ra;\n          s = sa;\n        } else {\n          l = i;\n          if (e[i] === 0) {\n            cdivres = cdiv(-ra, -sa, w, q);\n            H.set(i, n - 1, cdivres[0]);\n            H.set(i, n, cdivres[1]);\n          } else {\n            x = H.get(i, i + 1);\n            y = H.get(i + 1, i);\n            vr = (d[i] - p) * (d[i] - p) + e[i] * e[i] - q * q;\n            vi = (d[i] - p) * 2 * q;\n            if (vr === 0 && vi === 0) {\n              vr =\n                eps *\n                norm *\n                (Math.abs(w) +\n                  Math.abs(q) +\n                  Math.abs(x) +\n                  Math.abs(y) +\n                  Math.abs(z));\n            }\n            cdivres = cdiv(\n              x * r - z * ra + q * sa,\n              x * s - z * sa - q * ra,\n              vr,\n              vi,\n            );\n            H.set(i, n - 1, cdivres[0]);\n            H.set(i, n, cdivres[1]);\n            if (Math.abs(x) > Math.abs(z) + Math.abs(q)) {\n              H.set(\n                i + 1,\n                n - 1,\n                (-ra - w * H.get(i, n - 1) + q * H.get(i, n)) / x,\n              );\n              H.set(\n                i + 1,\n                n,\n                (-sa - w * H.get(i, n) - q * H.get(i, n - 1)) / x,\n              );\n            } else {\n              cdivres = cdiv(\n                -r - y * H.get(i, n - 1),\n                -s - y * H.get(i, n),\n                z,\n                q,\n              );\n              H.set(i + 1, n - 1, cdivres[0]);\n              H.set(i + 1, n, cdivres[1]);\n            }\n          }\n\n          t = Math.max(Math.abs(H.get(i, n - 1)), Math.abs(H.get(i, n)));\n          if (eps * t * t > 1) {\n            for (j = i; j <= n; j++) {\n              H.set(j, n - 1, H.get(j, n - 1) / t);\n              H.set(j, n, H.get(j, n) / t);\n            }\n          }\n        }\n      }\n    }\n  }\n\n  for (i = 0; i < nn; i++) {\n    if (i < low || i > high) {\n      for (j = i; j < nn; j++) {\n        V.set(i, j, H.get(i, j));\n      }\n    }\n  }\n\n  for (j = nn - 1; j >= low; j--) {\n    for (i = low; i <= high; i++) {\n      z = 0;\n      for (k = low; k <= Math.min(j, high); k++) {\n        z = z + V.get(i, k) * H.get(k, j);\n      }\n      V.set(i, j, z);\n    }\n  }\n}\n\nfunction cdiv(xr, xi, yr, yi) {\n  let r, d;\n  if (Math.abs(yr) > Math.abs(yi)) {\n    r = yi / yr;\n    d = yr + r * yi;\n    return [(xr + r * xi) / d, (xi - r * xr) / d];\n  } else {\n    r = yr / yi;\n    d = yi + r * yr;\n    return [(r * xr + xi) / d, (r * xi - xr) / d];\n  }\n}\n","import Matrix from '../matrix';\nimport WrapperMatrix2D from '../wrap/WrapperMatrix2D';\n\nexport default class CholeskyDecomposition {\n  constructor(value) {\n    value = WrapperMatrix2D.checkMatrix(value);\n    if (!value.isSymmetric()) {\n      throw new Error('Matrix is not symmetric');\n    }\n\n    let a = value;\n    let dimension = a.rows;\n    let l = new Matrix(dimension, dimension);\n    let positiveDefinite = true;\n    let i, j, k;\n\n    for (j = 0; j < dimension; j++) {\n      let d = 0;\n      for (k = 0; k < j; k++) {\n        let s = 0;\n        for (i = 0; i < k; i++) {\n          s += l.get(k, i) * l.get(j, i);\n        }\n        s = (a.get(j, k) - s) / l.get(k, k);\n        l.set(j, k, s);\n        d = d + s * s;\n      }\n\n      d = a.get(j, j) - d;\n\n      positiveDefinite &= d > 0;\n      l.set(j, j, Math.sqrt(Math.max(d, 0)));\n      for (k = j + 1; k < dimension; k++) {\n        l.set(j, k, 0);\n      }\n    }\n\n    this.L = l;\n    this.positiveDefinite = Boolean(positiveDefinite);\n  }\n\n  isPositiveDefinite() {\n    return this.positiveDefinite;\n  }\n\n  solve(value) {\n    value = WrapperMatrix2D.checkMatrix(value);\n\n    let l = this.L;\n    let dimension = l.rows;\n\n    if (value.rows !== dimension) {\n      throw new Error('Matrix dimensions do not match');\n    }\n    if (this.isPositiveDefinite() === false) {\n      throw new Error('Matrix is not positive definite');\n    }\n\n    let count = value.columns;\n    let B = value.clone();\n    let i, j, k;\n\n    for (k = 0; k < dimension; k++) {\n      for (j = 0; j < count; j++) {\n        for (i = 0; i < k; i++) {\n          B.set(k, j, B.get(k, j) - B.get(i, j) * l.get(k, i));\n        }\n        B.set(k, j, B.get(k, j) / l.get(k, k));\n      }\n    }\n\n    for (k = dimension - 1; k >= 0; k--) {\n      for (j = 0; j < count; j++) {\n        for (i = k + 1; i < dimension; i++) {\n          B.set(k, j, B.get(k, j) - B.get(i, j) * l.get(i, k));\n        }\n        B.set(k, j, B.get(k, j) / l.get(k, k));\n      }\n    }\n\n    return B;\n  }\n\n  get lowerTriangularMatrix() {\n    return this.L;\n  }\n}\n","import WrapperMatrix2D from '../wrap/WrapperMatrix2D';\nimport Matrix from '../matrix';\n\nexport default class nipals {\n  constructor(X, options = {}) {\n    X = WrapperMatrix2D.checkMatrix(X);\n    let { Y } = options;\n    const {\n      scaleScores = false,\n      maxIterations = 1000,\n      terminationCriteria = 1e-10,\n    } = options;\n\n    let u;\n    if (Y) {\n      if (Array.isArray(Y) && typeof Y[0] === 'number') {\n        Y = Matrix.columnVector(Y);\n      } else {\n        Y = WrapperMatrix2D.checkMatrix(Y);\n      }\n      if (!Y.isColumnVector() || Y.rows !== X.rows) {\n        throw new Error('Y must be a column vector of length X.rows');\n      }\n      u = Y;\n    } else {\n      u = X.getColumnVector(0);\n    }\n\n    let diff = 1;\n    let t, q, w, tOld;\n\n    for (\n      let counter = 0;\n      counter < maxIterations && diff > terminationCriteria;\n      counter++\n    ) {\n      w = X.transpose()\n        .mmul(u)\n        .div(\n          u\n            .transpose()\n            .mmul(u)\n            .get(0, 0),\n        );\n      w = w.div(w.norm());\n\n      t = X.mmul(w).div(\n        w\n          .transpose()\n          .mmul(w)\n          .get(0, 0),\n      );\n\n      if (counter > 0) {\n        diff = t\n          .clone()\n          .sub(tOld)\n          .pow(2)\n          .sum();\n      }\n      tOld = t.clone();\n\n      if (Y) {\n        q = Y.transpose()\n          .mmul(t)\n          .div(\n            t\n              .transpose()\n              .mmul(t)\n              .get(0, 0),\n          );\n        q = q.div(q.norm());\n\n        u = Y.mmul(q).div(\n          q\n            .transpose()\n            .mmul(q)\n            .get(0, 0),\n        );\n      } else {\n        u = t;\n      }\n    }\n\n    if (Y) {\n      let p = X.transpose()\n        .mmul(t)\n        .div(\n          t\n            .transpose()\n            .mmul(t)\n            .get(0, 0),\n        );\n      p = p.div(p.norm());\n      let xResidual = X.clone().sub(t.clone().mmul(p.transpose()));\n      let residual = u\n        .transpose()\n        .mmul(t)\n        .div(\n          t\n            .transpose()\n            .mmul(t)\n            .get(0, 0),\n        );\n      let yResidual = Y.clone().sub(\n        t\n          .clone()\n          .mulS(residual.get(0, 0))\n          .mmul(q.transpose()),\n      );\n\n      this.t = t;\n      this.p = p.transpose();\n      this.w = w.transpose();\n      this.q = q;\n      this.u = u;\n      this.s = t.transpose().mmul(t);\n      this.xResidual = xResidual;\n      this.yResidual = yResidual;\n      this.betas = residual;\n    } else {\n      this.w = w.transpose();\n      this.s = t\n        .transpose()\n        .mmul(t)\n        .sqrt();\n      if (scaleScores) {\n        this.t = t.clone().div(this.s.get(0, 0));\n      } else {\n        this.t = t;\n      }\n      this.xResidual = X.sub(t.mmul(w.transpose()));\n    }\n  }\n}\n","export { AbstractMatrix, default, default as Matrix } from './matrix';\nexport * from './views/index';\n\nexport { wrap } from './wrap/wrap';\nexport { default as WrapperMatrix1D } from './wrap/WrapperMatrix1D';\nexport { default as WrapperMatrix2D } from './wrap/WrapperMatrix2D';\n\nexport { solve, inverse } from './decompositions';\nexport { determinant } from './determinant';\nexport { linearDependencies } from './linearDependencies';\nexport { pseudoInverse } from './pseudoInverse';\nexport { covariance } from './covariance';\nexport { correlation } from './correlation';\n\nexport {\n  default as SingularValueDecomposition,\n  default as SVD,\n} from './dc/svd.js';\nexport {\n  default as EigenvalueDecomposition,\n  default as EVD,\n} from './dc/evd.js';\nexport {\n  default as CholeskyDecomposition,\n  default as CHO,\n} from './dc/cholesky.js';\nexport { default as LuDecomposition, default as LU } from './dc/lu.js';\nexport { default as QrDecomposition, default as QR } from './dc/qr.js';\nexport { default as Nipals, default as NIPALS } from './dc/nipals.js';\n","import './once.js';\r\nimport mouseCanvas from './mouseCanvas.js';\r\nimport { Matrix, pseudoInverse } from 'ml-matrix'\r\nfunction crossProduct(a, b, out) {\r\n    out = out || [];\r\n    var ax = a[0], ay = a[1], az = a[2],\r\n        bx = b[0], by = b[1], bz = b[2];\r\n    out[0] = ay * bz - az * by;\r\n    out[1] = az * bx - ax * bz;\r\n    out[2] = ax * by - ay * bx;\r\n    return out;\r\n}\r\n\r\nconst canvas = document.querySelector(\"canvas\");\r\n\r\n//////////// ROTATION\r\n\r\nlet rotates = [];\r\nfunction pushRotate(angle) { rotates.push(angle); }\r\nfunction popRotate(angle) { rotates.pop(); }\r\nfunction getRotate() {\r\n    if (rotates.length > 0) return rotates[rotates.length - 1];\r\n    else return 0;\r\n}\r\n\r\nfunction useRotation(x, y) {\r\n    var angle = getRotate();\r\n    let px = x * Math.cos(angle) + y * Math.sin(angle);\r\n    let py = x * -Math.sin(angle) + y * Math.cos(angle);\r\n    return [px, py];\r\n}\r\n\r\n\r\n\r\nlet target = [200, -200];\r\nlet realTarget = [200, -200];\r\n\r\nmouseCanvas(canvas)\r\n    .toCanvas(toCanvas)\r\n    .addRect((h) => h.rectAround(target, 5))\r\n    .state(\"select\", {\r\n        callback: e => {\r\n            switch (e.type) {\r\n                case \"enter\": { e.cursor = \"grab\"; break; }\r\n                case \"exit\": { e.cursor = \"default\"; break; }\r\n            }\r\n        },\r\n        mouseDown: e => {\r\n            if (e.rect) e.state = \"drag\";\r\n        }\r\n    })\r\n    .state(\"drag\", {\r\n        mouseMove: e => {\r\n            e.cursor = \"grabbing\";\r\n            const [x, y] = fromCanvas(e.x, e.y);\r\n            realTarget[0] = target[0] = x;\r\n            realTarget[1] = target[1] = y;\r\n        },\r\n        mouseUp: e => {\r\n            e.state = \"select\";\r\n            e.cursor = \"grab\";\r\n        }\r\n    });\r\n\r\nconst ctx = canvas.getContext(\"2d\");\r\n\r\n\r\n\r\n\r\nfunction toCanvas(x, y) { return [x + canvas.width / 5, y + 4 * canvas.height / 5]; }\r\nfunction fromCanvas(x, y) { return [x - canvas.width / 5, y - 4 * canvas.height / 5]; }\r\nfunction drawCircle(x, y, r) {\r\n    [x, y] = toCanvas(x, y);\r\n    ctx.beginPath();\r\n    ctx.arc(x, y, r, 0, 2 * Math.PI);\r\n    ctx.stroke();\r\n}\r\nfunction drawCross(x, y, r) {\r\n    [x, y] = toCanvas(x, y);\r\n    var [fx, fy] = useRotation(-r, 0);\r\n    var [tx, ty] = useRotation(+r, 0);\r\n    ctx.beginPath();\r\n    ctx.moveTo(x + fx, y + fy);\r\n    ctx.lineTo(x + tx, y + ty);\r\n    ctx.stroke();\r\n\r\n    [fx, fy] = useRotation(0, -r);\r\n    [tx, ty] = useRotation(0, +r);\r\n    ctx.beginPath();\r\n    ctx.moveTo(x + fx, y + fy);\r\n    ctx.lineTo(x + tx, y + ty);\r\n    ctx.stroke();\r\n}\r\nfunction drawAngle(x, y, r, angle) {\r\n    [x, y] = toCanvas(x, y);\r\n    var startAngle = getRotate();\r\n\r\n    ctx.fillStyle = \"lightblue\";\r\n    ctx.strokeStyle = \"blue\";\r\n    ctx.beginPath();\r\n    ctx.moveTo(x, y);\r\n    ctx.arc(x, y, r, -(startAngle - angle), -(startAngle), true);\r\n    ctx.closePath();\r\n    ctx.fill();\r\n    var oldLineWidth = ctx.lineWidth;\r\n    ctx.lineWidth = 1;\r\n    ctx.stroke();\r\n    ctx.lineWidth = oldLineWidth;\r\n\r\n    ctx.fillStyle = \"black\";\r\n    ctx.strokeStyle = \"black\";\r\n}\r\nfunction drawBone(x, r) {\r\n    var w = x.world;\r\n    var ew = x.effector_world;\r\n    let [cx, cy] = toCanvas(w.x, w.y);\r\n    let [ex, ey] = toCanvas(ew.x, ew.y);\r\n    let [tx, ty] = useRotation(0, -r);\r\n    let [bx, by] = useRotation(0, +r);\r\n\r\n    ctx.beginPath();\r\n    ctx.moveTo(cx + tx, cy + ty);\r\n    ctx.lineTo(ex, ey);\r\n    ctx.lineTo(cx + bx, cy + by);\r\n    ctx.stroke();\r\n}\r\nfunction drawBones(bones) {\r\n    let eff = bones.filter(x => x.isEffector)[0].effector_world;\r\n    bones.forEach((x, i) => {\r\n        var w = x.world;\r\n        pushRotate(x.world.angle + x.angle);\r\n        drawAngle(w.x, w.y, 10, x.angle);\r\n        drawCircle(w.x, w.y, 20);\r\n        drawCross(w.x, w.y, 20);\r\n        drawBone(x, 20);\r\n        popRotate();\r\n\r\n        if (x.drawCircle) {\r\n            var xl = eff.x - x.world.x;\r\n            var yl = eff.y - x.world.y;\r\n            var l = Math.sqrt(xl ** 2 + yl ** 2);\r\n\r\n            var w = x.world;\r\n            let [cx, cy] = toCanvas(w.x, w.y);\r\n            ctx.setLineDash([5, 5]);\r\n            ctx.beginPath();\r\n            ctx.arc(cx, cy, l, 0, 2 * Math.PI, true);\r\n            ctx.stroke();\r\n            ctx.setLineDash([]);\r\n\r\n            if (j) {\r\n                eff = bones.filter(x => x.isEffector)[0];\r\n                let [cx, cy] = toCanvas(\r\n                    eff.effector_world.x,\r\n                    eff.effector_world.y);\r\n\r\n\r\n                var l = Math.sqrt(\r\n                    (j.get(0, i) ** 2) +\r\n                    (j.get(1, i) ** 2)\r\n                );\r\n                var oldStrokeStyle = ctx.strokeStyle;\r\n                ctx.strokeStyle = \"red\";\r\n                ctx.beginPath();\r\n                ctx.moveTo(cx, cy);\r\n                ctx.lineTo(\r\n                    cx + (j.get(0, i) / l) * 100,\r\n                    cy + (j.get(1, i) / l) * 100\r\n                );\r\n                ctx.stroke();\r\n                ctx.strokeStyle = oldStrokeStyle;\r\n            }\r\n        }\r\n    });\r\n}\r\n\r\nfunction drawDashedLine(x1, y1, x2, y2) {\r\n    [x1, y1] = toCanvas(x1, y1);\r\n    [x2, y2] = toCanvas(x2, y2);\r\n\r\n    ctx.setLineDash([5, 5]);\r\n    ctx.beginPath();\r\n    ctx.moveTo(x1, y1);\r\n    ctx.lineTo(x2, y2);\r\n    ctx.stroke();\r\n    ctx.setLineDash([])\r\n}\r\n\r\nfunction drawPathTarget(bones, target) {\r\n    let e = bones.filter(x => x.isEffector)[0];\r\n    drawDashedLine(\r\n        e.effector_world.x, e.effector_world.y,\r\n        target[0], target[1]\r\n    );\r\n}\r\n\r\nfunction drawTarget(target, color) {\r\n    color = color || \"black\";\r\n    var strokeStyle = ctx.strokeStyle;\r\n    ctx.strokeStyle = color;\r\n\r\n    drawCircle(target[0], target[1], 5);\r\n    drawCross(target[0], target[1], 5);\r\n\r\n    ctx.strokeStyle = strokeStyle;\r\n}\r\n\r\nlet bones = [\r\n    { length: 200, angle: Math.PI / 4, world: {} },\r\n    { length: 200, angle: Math.PI / 4, world: {}, isEffector: true },\r\n];\r\nlet skeleton = [\r\n    { children: [1] }\r\n]\r\n\r\nvar j;\r\nvar jpath = [];\r\nfunction updateJ() {\r\n    let recordPath = false;\r\n    if (jpath.length == 0) recordPath = true;\r\n    if (recordPath) jpath = [];\r\n\r\n    let eff = bones.filter(x => x.isEffector)[0];\r\n    let maxLength = 400; //hardcoded\r\n    //how much theta change, change effector pos?\r\n\r\n    realTarget[0] = target[0];\r\n    realTarget[1] = target[1];\r\n\r\n    let ox = bones[0].world.x;\r\n    let oy = bones[0].world.y;\r\n    let rayx = realTarget[0] - ox;\r\n    let rayy = realTarget[1] - oy;\r\n    let l = Math.sqrt(rayx ** 2 + rayy ** 2);\r\n    if (l > maxLength) {\r\n        realTarget[0] = ox + (rayx / l) * maxLength;\r\n        realTarget[1] = oy + (rayy / l) * maxLength;\r\n    }\r\n\r\n    let steps = 10;\r\n    var deffx = realTarget[0] - eff.effector_world.x;\r\n    var deffy = realTarget[1] - eff.effector_world.y;\r\n    var distance = Math.sqrt(\r\n        deffx ** 2 +\r\n        deffy ** 2\r\n    );\r\n\r\n\r\n    while (steps > 0 && Math.abs(distance) > 5) {\r\n        steps--;\r\n        // 2xbones\r\n        j = Matrix.zeros(2, bones.length);\r\n        for (var i = bones.length - 1; i >= 0; --i) {\r\n            var b = bones[i];\r\n\r\n            var dx = eff.effector_world.x - b.world.x;\r\n            var dy = eff.effector_world.y - b.world.y;\r\n            var cp = crossProduct([0, 0, 1], [dx, dy, 0]);\r\n\r\n            j.set(0, i, -cp[0]);\r\n            j.set(1, i, -cp[1]);\r\n        }\r\n\r\n        // bonesx2\r\n        let jPlus = pseudoInverse(j);\r\n\r\n        var deffx = realTarget[0] - eff.effector_world.x;\r\n        var deffy = realTarget[1] - eff.effector_world.y;\r\n        //bonesx2 * 2x1 = bonesx1\r\n        var dtheta = jPlus.mmul(new Matrix([[deffx], [deffy]]));\r\n\r\n        var bonespos = [];\r\n        for (var i = 0; i < bones.length; ++i) {\r\n            var b = bones[i];\r\n            var a = dtheta.get(i, 0) * 0.1;\r\n            var max = 0.01;\r\n            if (a > max) a = max;\r\n            if (a < -max) a = -max;\r\n            b.angle += a;\r\n            bonespos.push(b.angle);\r\n        }\r\n        jpath.push(bonespos);\r\n\r\n        updateBones(skeleton, bones, { x: 0, y: 0, angle: 0 });\r\n\r\n        deffx = realTarget[0] - eff.effector_world.x;\r\n        deffy = realTarget[1] - eff.effector_world.y;\r\n        distance = Math.sqrt(deffx ** 2 + deffy ** 2);\r\n\r\n\r\n    }\r\n\r\n    // document.getElementById(\"stepDebug\").innerText =\r\n    //     JSON.stringify({bones,j, angles});\r\n}\r\n\r\nlet ikEnabled = false;\r\ndocument.getElementById(\"ikstep\")\r\n    .addEventListener(\"click\", e => {\r\n        jpath = [];\r\n        ikEnabled = e.target.checked;\r\n    });\r\n\r\nfunction updateBone(skeleton, bones, i, world) {\r\n    var bone = bones[i];\r\n    bone.world.x = world.x;\r\n    bone.world.y = world.y;\r\n    bone.world.angle = world.angle;\r\n\r\n    var t = world.angle + bone.angle;\r\n    var l = bone.length;\r\n    bone.effector_world = {};\r\n    bone.effector_world.angle = t;\r\n    bone.effector_world.x = world.x + (l * Math.cos(t) + 0 * Math.sin(t));\r\n    bone.effector_world.y = world.y + (l * -Math.sin(t) + 0 * Math.cos(t));\r\n\r\n    if (skeleton[i] && skeleton[i].children) {\r\n        var children = skeleton[i].children;\r\n        children.forEach(xx => {\r\n            updateBone(skeleton, bones, xx, bone.effector_world);\r\n        });\r\n    }\r\n}\r\n\r\nfunction updateBones(skeleton, bones, world) {\r\n    skeleton.forEach((x, i) =>\r\n        updateBone(skeleton, bones, i, world)\r\n    );\r\n}\r\n\r\nfunction render() {\r\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\r\n\r\n    var [cx, cy] = toCanvas(0, 0);\r\n    var [ux, uy] = toCanvas(100, 100);\r\n    ctx.beginPath();\r\n    ctx.moveTo(cx, cy);\r\n    ctx.lineTo(ux, cy);\r\n    ctx.stroke();\r\n    ctx.beginPath();\r\n    ctx.moveTo(cx, cy);\r\n    ctx.lineTo(cx, uy);\r\n    ctx.stroke();\r\n\r\n    updateBones(skeleton, bones, { x: 0, y: 0, angle: 0 });\r\n    if (ikEnabled)\r\n        updateJ();\r\n    drawBones(bones);\r\n\r\n    drawPathTarget(bones, target);\r\n    drawTarget(realTarget, \"lightGray\");\r\n    drawTarget(target);\r\n\r\n\r\n    //draw state space    \r\n    ctx.beginPath();\r\n    ctx.rect(580, 20, 200, 200);\r\n    ctx.stroke();\r\n    function toAngleSpace(t1) {\r\n        let x = t1 / (2 * Math.PI);\r\n        if (x < 0) x += 1;\r\n        if (x > 1) x -= 1;\r\n        return x;\r\n    }\r\n    ctx.beginPath();\r\n    ctx.arc(\r\n        580 + (toAngleSpace(bones[0].angle) * 200),\r\n        20 + (toAngleSpace(bones[1].angle) * 200),\r\n        5, 0, 2 * Math.PI, true);\r\n    ctx.stroke();\r\n    jpath.forEach(x => {\r\n        ctx.beginPath();\r\n        ctx.arc(\r\n            580 + (toAngleSpace(x[0]) * 200),\r\n            20 + (toAngleSpace(x[1]) * 200),\r\n            5, 0, 2 * Math.PI, true);\r\n        ctx.stroke();\r\n    });\r\n    ctx.fillText(\"θ2\", 565, 215);\r\n    ctx.fillText(\"θ1\", 580, 235);\r\n\r\n    requestAnimationFrame(render);\r\n}\r\nrequestAnimationFrame(render);\r\n\r\nbones.forEach((x, i) => {\r\n    let input = document.createElement(\"input\");\r\n    let label = document.createElement(\"label\");\r\n    input.style = \"width: 400px\";\r\n    input.type = \"range\";\r\n    input.min = 0;\r\n    input.max = 360;\r\n    input.addEventListener(\"input\", x => {\r\n        bones[i].angle = parseFloat(input.value / 180 * Math.PI);\r\n        label.innerText = input.value;\r\n    });\r\n\r\n    let root = document.createElement(\"div\");\r\n    root.addEventListener(\"mouseenter\", x => {\r\n        bones[i].drawCircle = true;\r\n    });\r\n    root.addEventListener(\"mouseleave\", x => {\r\n        bones[i].drawCircle = false;\r\n    });\r\n    root.append(input);\r\n    root.append(label);\r\n\r\n    document.getElementById(\"angles\").append(root);\r\n})\r\n\r\n\r\n\r\n"]}